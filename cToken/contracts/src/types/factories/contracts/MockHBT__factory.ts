/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../common";
import type { MockHBT, MockHBTInterface } from "../../contracts/MockHBT";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040805180820182526007815266135bd8dad2109560ca1b6020808301918252835180850190945260048452631352109560e21b9084015281519192916200005d916000916200007c565b508051620000739060019060208401906200007c565b5050506200015e565b8280546200008a9062000122565b90600052602060002090601f016020900481019282620000ae5760008555620000f9565b82601f10620000c957805160ff1916838001178555620000f9565b82800160010185558215620000f9579182015b82811115620000f9578251825591602001919060010190620000dc565b50620001079291506200010b565b5090565b5b808211156200010757600081556001016200010c565b600181811c908216806200013757607f821691505b6020821081036200015857634e487b7160e01b600052602260045260246000fd5b50919050565b611509806200016e6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb465146101ff578063b88d4fde14610212578063c87b56dd14610225578063e985e9c51461023857600080fd5b80636352211e146101b057806370a08231146101c357806395d89b41146101e4578063a1448194146101ec57600080fd5b8063095ea7b3116100d3578063095ea7b31461016257806323b872dd1461017757806342842e0e1461018a57806342966c681461019d57600080fd5b806301ffc9a7146100fa57806306fdde0314610122578063081812fc14610137575b600080fd5b61010d6101083660046110e9565b610274565b60405190151581526020015b60405180910390f35b61012a6102c6565b604051610119919061115e565b61014a610145366004611171565b610358565b6040516001600160a01b039091168152602001610119565b6101756101703660046111a6565b61037f565b005b6101756101853660046111d0565b610499565b6101756101983660046111d0565b610511565b6101756101ab366004611171565b61052c565b61014a6101be366004611171565b610538565b6101d66101d136600461120c565b61059d565b604051908152602001610119565b61012a610637565b6101756101fa3660046111a6565b610646565b61017561020d366004611227565b6106aa565b610175610220366004611279565b6106b5565b61012a610233366004611171565b610734565b61010d610246366004611355565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806102a557506001600160e01b03198216635b5e139f60e01b145b806102c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102d590611388565b80601f016020809104026020016040519081016040528092919081815260200182805461030190611388565b801561034e5780601f106103235761010080835404028352916020019161034e565b820191906000526020600020905b81548152906001019060200180831161033157829003601f168201915b5050505050905090565b6000610363826107a8565b506000908152600460205260409020546001600160a01b031690565b600061038a82610538565b9050806001600160a01b0316836001600160a01b0316036103fc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061041857506104188133610246565b61048a5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016103f3565b610494838361080c565b505050565b6104a3338261087a565b6105065760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016103f3565b6104948383836108f9565b610494838383604051806020016040528060008152506106b5565b61053581610aad565b50565b6000818152600260205260408120546001600160a01b0316806102c05760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016103f3565b60006001600160a01b03821661061b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016103f3565b506001600160a01b031660009081526003602052604090205490565b6060600180546102d590611388565b61064f8261059d565b1561069c5760405162461bcd60e51b815260206004820152601c60248201527f4164647265737320616c7265616479206f776e7320616e204842542e0000000060448201526064016103f3565b6106a68282610b48565b5050565b6106a6338383610b62565b6106bf338361087a565b6107225760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016103f3565b61072e84848484610c30565b50505050565b606061073f826107a8565b600061075660408051602081019091526000815290565b9050600081511161077657604051806020016040528060008152506107a1565b8061078084610cae565b6040516020016107919291906113c2565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166105355760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016103f3565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061084182610538565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061088683610538565b9050806001600160a01b0316846001600160a01b031614806108cd57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806108f15750836001600160a01b03166108e684610358565b6001600160a01b0316145b949350505050565b826001600160a01b031661090c82610538565b6001600160a01b0316146109885760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016103f3565b6001600160a01b0382166109ea5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103f3565b6109f560008261080c565b6001600160a01b0383166000908152600360205260408120805460019290610a1e908490611407565b90915550506001600160a01b0382166000908152600360205260408120805460019290610a4c90849061141e565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610ab882610538565b9050610ac560008361080c565b6001600160a01b0381166000908152600360205260408120805460019290610aee908490611407565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6106a6828260405180602001604052806000815250610dc7565b816001600160a01b0316836001600160a01b031603610bc35760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103f3565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610c3b8484846108f9565b610c4784848484610e45565b61072e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016103f3565b606081600003610cd55750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610cff5780610ce981611436565b9150610cf89050600a83611465565b9150610cd9565b60008167ffffffffffffffff811115610d1a57610d1a611263565b6040519080825280601f01601f191660200182016040528015610d44576020820181803683370190505b5090505b84156108f157610d59600183611407565b9150610d66600a86611479565b610d7190603061141e565b60f81b818381518110610d8657610d8661148d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610dc0600a86611465565b9450610d48565b610dd18383610f91565b610dde6000848484610e45565b6104945760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016103f3565b60006001600160a01b0384163b15610f8657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610e899033908990889088906004016114a3565b6020604051808303816000875af1925050508015610ec4575060408051601f3d908101601f19168201909252610ec1918101906114df565b60015b610f6c573d808015610ef2576040519150601f19603f3d011682016040523d82523d6000602084013e610ef7565b606091505b508051600003610f645760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016103f3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108f1565b506001949350505050565b6001600160a01b038216610fe75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103f3565b6000818152600260205260409020546001600160a01b03161561104c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103f3565b6001600160a01b038216600090815260036020526040812080546001929061107590849061141e565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461053557600080fd5b6000602082840312156110fb57600080fd5b81356107a1816110d3565b60005b83811015611121578181015183820152602001611109565b8381111561072e5750506000910152565b6000815180845261114a816020860160208601611106565b601f01601f19169290920160200192915050565b6020815260006107a16020830184611132565b60006020828403121561118357600080fd5b5035919050565b80356001600160a01b03811681146111a157600080fd5b919050565b600080604083850312156111b957600080fd5b6111c28361118a565b946020939093013593505050565b6000806000606084860312156111e557600080fd5b6111ee8461118a565b92506111fc6020850161118a565b9150604084013590509250925092565b60006020828403121561121e57600080fd5b6107a18261118a565b6000806040838503121561123a57600080fd5b6112438361118a565b91506020830135801515811461125857600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561128f57600080fd5b6112988561118a565b93506112a66020860161118a565b925060408501359150606085013567ffffffffffffffff808211156112ca57600080fd5b818701915087601f8301126112de57600080fd5b8135818111156112f0576112f0611263565b604051601f8201601f19908116603f0116810190838211818310171561131857611318611263565b816040528281528a602084870101111561133157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561136857600080fd5b6113718361118a565b915061137f6020840161118a565b90509250929050565b600181811c9082168061139c57607f821691505b6020821081036113bc57634e487b7160e01b600052602260045260246000fd5b50919050565b600083516113d4818460208801611106565b8351908301906113e8818360208801611106565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611419576114196113f1565b500390565b60008219821115611431576114316113f1565b500190565b600060018201611448576114486113f1565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826114745761147461144f565b500490565b6000826114885761148861144f565b500690565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b038087168352808616602084015250836040830152608060608301526114d56080830184611132565b9695505050505050565b6000602082840312156114f157600080fd5b81516107a1816110d356fea164736f6c634300080e000a";

type MockHBTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockHBTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockHBT__factory extends ContractFactory {
  constructor(...args: MockHBTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockHBT> {
    return super.deploy(overrides || {}) as Promise<MockHBT>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockHBT {
    return super.attach(address) as MockHBT;
  }
  override connect(signer: Signer): MockHBT__factory {
    return super.connect(signer) as MockHBT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockHBTInterface {
    return new utils.Interface(_abi) as MockHBTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockHBT {
    return new Contract(address, _abi, signerOrProvider) as MockHBT;
  }
}
