{
  "address": "0x748f8e92b94bACFB18b53619bA501a5c93724a3d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hbtContract_",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "dripAmount_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeLockInSeconds_",
          "type": "uint128"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Dripped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "drip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "hbtContract_",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "dripAmount_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeLockInSeconds_",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hbtContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDrip",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeLockInSeconds",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newAmount",
          "type": "uint128"
        }
      ],
      "name": "updateDripAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newHBTContractAddress",
          "type": "address"
        }
      ],
      "name": "updateHBTContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newTimeLock",
          "type": "uint128"
        }
      ],
      "name": "updateTimeLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x107f5c4e7eb2d82d5b498cf93582bc809de09ebadcba7bd2a112d4251622e890",
  "receipt": {
    "to": null,
    "from": "0x25AF0ccA791baEe922D9fa0744880ae6E0422021",
    "contractAddress": "0x748f8e92b94bACFB18b53619bA501a5c93724a3d",
    "transactionIndex": 35,
    "gasUsed": "1157764",
    "logsBloom": "0x
    "blockHash": "0x65ebb7dee560ebba8407ab8d03a2a62f3e91812f8b5673fd0d5824d4c79def93",
    "transactionHash": "0x107f5c4e7eb2d82d5b498cf93582bc809de09ebadcba7bd2a112d4251622e890",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 29200065,
        "transactionHash": "0x107f5c4e7eb2d82d5b498cf93582bc809de09ebadcba7bd2a112d4251622e890",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0xe6497e3ee548a3372136af2fcb0696db31fc6cf20260707645068bd3fe97f3c4",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000025af0cca791baee922d9fa0744880ae6e0422021",
          "0x000000000000000000000000748f8e92b94bacfb18b53619ba501a5c93724a3d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000021c2830e11ec37fe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ad227b43e3a37fe00000000000000000000000000000000000000000000000006f05b59d3b20000",
        "logIndex": 98,
        "blockHash": "0x65ebb7dee560ebba8407ab8d03a2a62f3e91812f8b5673fd0d5824d4c79def93"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 29200065,
        "transactionHash": "0x107f5c4e7eb2d82d5b498cf93582bc809de09ebadcba7bd2a112d4251622e890",
        "address": "0x748f8e92b94bACFB18b53619bA501a5c93724a3d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000025af0cca791baee922d9fa0744880ae6e0422021"
        ],
        "data": "0x",
        "logIndex": 99,
        "blockHash": "0x65ebb7dee560ebba8407ab8d03a2a62f3e91812f8b5673fd0d5824d4c79def93"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 29200065,
        "transactionHash": "0x107f5c4e7eb2d82d5b498cf93582bc809de09ebadcba7bd2a112d4251622e890",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000025af0cca791baee922d9fa0744880ae6e0422021",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000558dfcdf3913000000000000000000000000000000000000000000000000021c7dbede0907256000000000000000000000000000000000000000000000aec3f868a4e167fb17200000000000000000000000000000000000000000000000021c2830e129ce126000000000000000000000000000000000000000000000aec3f8be32de47342a2",
        "logIndex": 100,
        "blockHash": "0x65ebb7dee560ebba8407ab8d03a2a62f3e91812f8b5673fd0d5824d4c79def93"
      }
    ],
    "blockNumber": 29200065,
    "cumulativeGasUsed": "8914719",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1888649d566908e0a4ac17978740f6a04f600a51",
    "100000000000000000",
    1209600
  ],
  "numDeployments": 2,
  "solcInputHash": "311458152ead8e26fdb7447a19e34670",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hbtContract_\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"dripAmount_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeLockInSeconds_\",\"type\":\"uint128\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"drip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hbtContract_\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"dripAmount_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeLockInSeconds_\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hbtContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLockInSeconds\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newAmount\",\"type\":\"uint128\"}],\"name\":\"updateDripAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newHBTContractAddress\",\"type\":\"address\"}],\"name\":\"updateHBTContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newTimeLock\",\"type\":\"uint128\"}],\"name\":\"updateTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Faucet.sol\":\"HumanboundTokenGatedFaucet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@violetprotocol/erc721extendable/contracts/extensions/base/getter/IGetterLogic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@violetprotocol/extendable/extensions/InternalExtension.sol\\\";\\n\\ninterface IGetterLogic {\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) external returns (address);\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) external returns (address);\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external returns (bool);\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     *\\n     * Requirements:\\n     *\\n     * - Must be modified with `public _internal`.\\n     */\\n    function _exists(uint256 tokenId) external returns (bool);\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     * - Must be modified with `public _internal`.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) external returns (bool);\\n}\\n\\nabstract contract GetterExtension is IGetterLogic, InternalExtension {\\n    /**\\n     * @dev see {IExtension-getSolidityInterface}\\n     */\\n    function getSolidityInterface() public pure virtual override returns (string memory) {\\n        return\\n            \\\"function balanceOf(address owner) external view returns (uint256);\\\\n\\\"\\n            \\\"function ownerOf(uint256 tokenId) external view returns (address);\\\\n\\\"\\n            \\\"function getApproved(uint256 tokenId) external view returns (address);\\\\n\\\"\\n            \\\"function isApprovedForAll(address owner, address operator) external view returns (bool);\\\\n\\\"\\n            \\\"function _exists(uint256 tokenId) external view returns (bool);\\\\n\\\"\\n            \\\"function _isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\\\n\\\";\\n    }\\n\\n    /**\\n     * @dev see {IExtension-getInterface}\\n     */\\n    function getInterface() public virtual override returns (Interface[] memory interfaces) {\\n        interfaces = new Interface[](1);\\n\\n        bytes4[] memory functions = new bytes4[](6);\\n        functions[0] = IGetterLogic.balanceOf.selector;\\n        functions[1] = IGetterLogic.ownerOf.selector;\\n        functions[2] = IGetterLogic.getApproved.selector;\\n        functions[3] = IGetterLogic.isApprovedForAll.selector;\\n        functions[4] = IGetterLogic._exists.selector;\\n        functions[5] = IGetterLogic._isApprovedOrOwner.selector;\\n\\n        interfaces[0] = Interface(type(IGetterLogic).interfaceId, functions);\\n    }\\n}\\n\",\"keccak256\":\"0x24e1c63f5bba5fb6ce45282650d66874fa787007785be3af308d005714a9f08e\",\"license\":\"MIT\"},\"@violetprotocol/extendable/erc165/IERC165Logic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external returns (bool);\\n}\\n\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Uses Extendable storage pattern to populate the registered interfaces storage variable.\\n */\\ninterface IERC165Register {\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function registerInterface(bytes4 interfaceId) external;\\n}\",\"keccak256\":\"0x4eff75b3b1814f99866e004b68cb1d7fd48bb1ff89854a0d3bb90ac6e293c9e6\",\"license\":\"MIT\"},\"@violetprotocol/extendable/errors/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev  ExtensionNotImplemented error is emitted by Extendable and Extensions\\n *       where no implementation for a specified function signature exists\\n *       in the contract\\n*/\\nerror ExtensionNotImplemented();\\n\\n\\n/**\\n * @dev  Utility library for contracts to catch custom errors\\n *       Pass in a return `result` from a call, and the selector for your error message\\n *       and the `catchCustomError` function will return `true` if the error was found\\n *       or `false` otherwise\\n*/\\nlibrary Errors {\\n    function catchCustomError(bytes memory result, bytes4 errorSelector) internal pure returns(bool) {\\n        bytes4 caught;\\n        assembly {\\n            caught := mload(add(result, 0x20))\\n        }\\n\\n        return caught == errorSelector;\\n    }\\n}\",\"keccak256\":\"0x3c5581551798f973fe70339bf5313d5be3446df69680bf878c695108beff1bc8\",\"license\":\"MIT\"},\"@violetprotocol/extendable/extensions/Extension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IExtension.sol\\\";\\nimport \\\"../errors/Errors.sol\\\";\\nimport \\\"../utils/CallerContext.sol\\\";\\nimport \\\"../erc165/IERC165Logic.sol\\\";\\n\\n/**\\n *  ______  __  __  ______  ______  __   __  _____   ______  ______  __      ______    \\n * /\\\\  ___\\\\/\\\\_\\\\_\\\\_\\\\/\\\\__  _\\\\/\\\\  ___\\\\/\\\\ \\\"-.\\\\ \\\\/\\\\  __-./\\\\  __ \\\\/\\\\  == \\\\/\\\\ \\\\    /\\\\  ___\\\\\\n * \\\\ \\\\  __\\\\\\\\/_/\\\\_\\\\/\\\\/_/\\\\ \\\\/\\\\ \\\\  __\\\\\\\\ \\\\ \\\\-.  \\\\ \\\\ \\\\/\\\\ \\\\ \\\\  __ \\\\ \\\\  __<\\\\ \\\\ \\\\___\\\\ \\\\  __\\\\\\n *  \\\\ \\\\_____\\\\/\\\\_\\\\/\\\\_\\\\ \\\\ \\\\_\\\\ \\\\ \\\\_____\\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\ \\\\____-\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_____\\\\ \\\\_____\\\\ \\\\_____\\\\\\n *   \\\\/_____/\\\\/_/\\\\/_/  \\\\/_/  \\\\/_____/\\\\/_/ \\\\/_/\\\\/____/ \\\\/_/\\\\/_/\\\\/_____/\\\\/_____/\\\\/_____/\\n *\\n *  Base contract for Extensions in the Extendable Framework\\n *  \\n *  Inherit and implement this contract to create Extension contracts!\\n *\\n *  Implements the EIP-165 standard for interface detection of implementations during runtime.\\n *  Uses the ERC165 singleton pattern where the actual implementation logic of the interface is\\n *  deployed in a separate contract. See ERC165Logic. Deterministic deployment guarantees the\\n *  ERC165Logic contract to always exist as static address 0x16C940672fA7820C36b2123E657029d982629070\\n *\\n *  Define your custom Extension interface and implement it whilst inheriting this contract:\\n *      contract YourExtension is IYourExtension, Extension {...}\\n *\\n */\\nabstract contract Extension is CallerContext, IExtension, IERC165, IERC165Register {\\n    address constant ERC165LogicAddress = 0x16C940672fA7820C36b2123E657029d982629070;\\n\\n    /**\\n     * @dev Constructor registers your custom Extension interface under EIP-165:\\n     *      https://eips.ethereum.org/EIPS/eip-165\\n    */\\n    constructor() {\\n        Interface[] memory interfaces = getInterface();\\n        for (uint256 i = 0; i < interfaces.length; i++) {\\n            Interface memory iface = interfaces[i];\\n            registerInterface(iface.interfaceId);\\n\\n            for (uint256 j = 0; j < iface.functions.length; j++) {\\n                registerInterface(iface.functions[j]);\\n            }\\n        }\\n\\n        registerInterface(type(IExtension).interfaceId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external override virtual returns(bool) {\\n        (bool success, bytes memory result) = ERC165LogicAddress.delegatecall(abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", interfaceId));\\n\\n        if (!success) {\\n            assembly {\\n                revert(result, returndatasize())\\n            }\\n        }\\n\\n        return abi.decode(result, (bool));\\n    }\\n\\n    function registerInterface(bytes4 interfaceId) public override virtual {\\n        (bool success, ) = ERC165LogicAddress.delegatecall(abi.encodeWithSignature(\\\"registerInterface(bytes4)\\\", interfaceId));\\n\\n        if (!success) {\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unidentified function signature calls to any Extension reverts with\\n     *      ExtensionNotImplemented error\\n    */\\n    function _fallback() internal virtual {\\n        revert ExtensionNotImplemented();\\n    }\\n\\n    /**\\n     * @dev Fallback function passes to internal _fallback() logic\\n    */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n    \\n    /**\\n     * @dev Payable fallback function passes to internal _fallback() logic\\n    */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Virtual override declaration of getFunctionSelectors() function to silence compiler\\n     *\\n     * Must be implemented in inherited contract.\\n    */\\n    function getInterface() override public virtual returns(Interface[] memory);\\n}\",\"keccak256\":\"0x4cd611549baf99c139ca1842fabf2ee97627cf856c6348efcc4186a0f0161ceb\",\"license\":\"MIT\"},\"@violetprotocol/extendable/extensions/IExtension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct Interface {\\n    bytes4 interfaceId;\\n    bytes4[] functions;\\n}\\n\\n/**\\n * @dev Interface for Extension\\n*/\\ninterface IExtension {\\n    /**\\n     * @dev Returns a full view of the functional interface of the extension\\n     *\\n     * Must return a list of the functions in the interface of your custom Extension\\n     * in the same format and syntax as in the interface itself as a string, \\n     * escaped-newline separated.\\n     *\\n     * OPEN TO SUGGESTIONS FOR IMPROVEMENT ON THIS METHODOLOGY FOR \\n     * DEEP DESCRIPTIVE RUNTIME INTROSPECTION\\n     *\\n     * Intent is to allow developers that want to integrate with an Extendable contract\\n     * that will have a constantly evolving interface, due to the nature of Extendables,\\n     * to be able to easily inspect and query for the current state of the interface and\\n     * integrate with it.\\n     *\\n     * See {ExtendLogic-getSolidityInterface} for an example.\\n    */\\n    function getSolidityInterface() external pure returns(string memory);\\n\\n    /**\\n     * @dev Returns the interface IDs that are implemented by the Extension\\n     *\\n     * These are full interface IDs and ARE NOT function selectors. Full interface IDs are\\n     * XOR'd function selectors of an interface. For example the interface ID of the ERC721\\n     * interface is 0x80ac58cd determined by the XOR or all function selectors of the interface.\\n     * \\n     * If an interface only consists of a single function, then the interface ID is identical\\n     * to that function selector.\\n     * \\n     * Provides a simple abstraction from the developer for any custom Extension to \\n     * be EIP-165 compliant out-of-the-box simply by implementing this function. \\n     *\\n     * Excludes any functions either already described by other interface definitions\\n     * that are not developed on top of this backbone i.e. EIP-165, IExtension\\n    */\\n    function getInterface() external returns(Interface[] memory interfaces);\\n}\",\"keccak256\":\"0xf23958c9a1107b5561f081620a3223ca73ce1f3c573137d7f851dac852908912\",\"license\":\"MIT\"},\"@violetprotocol/extendable/extensions/InternalExtension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Extension.sol\\\";\\nimport \\\"../utils/Internal.sol\\\";\\nimport \\\"../errors/Errors.sol\\\";\\n\\n/**\\n *  ______  __  __  ______  ______  __   __  _____   ______  ______  __      ______    \\n * /\\\\  ___\\\\/\\\\_\\\\_\\\\_\\\\/\\\\__  _\\\\/\\\\  ___\\\\/\\\\ \\\"-.\\\\ \\\\/\\\\  __-./\\\\  __ \\\\/\\\\  == \\\\/\\\\ \\\\    /\\\\  ___\\\\\\n * \\\\ \\\\  __\\\\\\\\/_/\\\\_\\\\/\\\\/_/\\\\ \\\\/\\\\ \\\\  __\\\\\\\\ \\\\ \\\\-.  \\\\ \\\\ \\\\/\\\\ \\\\ \\\\  __ \\\\ \\\\  __<\\\\ \\\\ \\\\___\\\\ \\\\  __\\\\\\n *  \\\\ \\\\_____\\\\/\\\\_\\\\/\\\\_\\\\ \\\\ \\\\_\\\\ \\\\ \\\\_____\\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\ \\\\____-\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_____\\\\ \\\\_____\\\\ \\\\_____\\\\\\n *   \\\\/_____/\\\\/_/\\\\/_/  \\\\/_/  \\\\/_____/\\\\/_/ \\\\/_/\\\\/____/ \\\\/_/\\\\/_/\\\\/_____/\\\\/_____/\\\\/_____/\\n *\\n *  Base contract for Internal Extensions in the Extendable Framework\\n *  \\n *  Internal Extensions are used to house common functions that are used by other contract extensions.\\n *  This is used to make internal functions usable across all your extensions without exposing it\\n *  to the external world.\\n *\\n *  Define your custom Extension interface and implement it whilst inheriting this contract:\\n *      contract YourExtension is IYourExtension, InternalExtension {...}\\n *\\n *  Then define your function and simply modify it in the following way:\\n *      contract YourExtension is IYourExtension, InternalExtension {\\n *          function _someFunc() public _internal {}\\n *      }\\n *   \\n *  Notice that your internal function carries both the `public` visibility modifier and the `_internal` \\n *  modifier. This is because cross-extension calls are resolved as external calls and `public` allows\\n *  your other extensions to call them whilst `_internal` restricts callers to only extensions of the\\n *  same contract.\\n *\\n *  Note:\\n *  Use underscores `_` as internal function prefixes as general naming convention.\\n */\\nabstract contract InternalExtension is Internal, Extension {}\",\"keccak256\":\"0xf7fdaf54b910732821db42f48f7022ea503a47370cf970af66dabcffae2ea2ed\",\"license\":\"MIT\"},\"@violetprotocol/extendable/storage/CallerContextStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct CallerState {\\n    // Stores a list of callers in the order they are received\\n    // The current caller context is always the last-most address\\n    address[] callerStack;\\n}\\n\\nlibrary CallerContextStorage {\\n    bytes32 constant private STORAGE_NAME = keccak256(\\\"extendable.framework.v1:caller-state\\\");\\n\\n    function _getState()\\n        internal \\n        view\\n        returns (CallerState storage callerState) \\n    {\\n        bytes32 position = keccak256(abi.encodePacked(address(this), STORAGE_NAME));\\n        assembly {\\n            callerState.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xb6b7176b4b1ec6e80aae63770c518144f514c36af1812e754d4c489f31e800d2\",\"license\":\"MIT\"},\"@violetprotocol/extendable/utils/CallerContext.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {CallerState, CallerContextStorage} from \\\"../storage/CallerContextStorage.sol\\\";\\n\\n/**\\n * @dev CallerContext contract provides Extensions with proper caller-scoped contexts.\\n *      Inherit this contract with your Extension to make use of caller references.\\n *\\n * `msg.sender` may not behave as developer intends when using within Extensions as many\\n * calls may be exchanged between intra-contract extensions which result in a `msg.sender` as self.\\n * Instead of using `msg.sender`, replace it with \\n *      - `_lastExternalCaller()` for the most recent caller in the call chain that is external to this contract\\n *      - `_lastCaller()` for the most recent caller\\n *\\n * CallerContext provides a deep callstack to track the caller of the Extension/Extendable contract\\n * at any point in the execution cycle.\\n *\\n*/\\ncontract CallerContext {\\n    /**\\n     * @dev Returns the most recent caller of this contract that came from outside this contract.\\n     *\\n     * Used by extensions that require fetching msg.sender that aren't cross-extension calls.\\n     * Cross-extension calls resolve msg.sender as the current contract and so the actual\\n     * caller context is obfuscated.\\n     * \\n     * This function should be used in place of `msg.sender` where external callers are read.\\n     */\\n    function _lastExternalCaller() internal view returns(address) {\\n        CallerState storage state = CallerContextStorage._getState();\\n\\n        for (uint i = state.callerStack.length - 1; i >= 0; i--) {\\n            address lastSubsequentCaller = state.callerStack[i];\\n            if (lastSubsequentCaller != address(this)) {\\n                return lastSubsequentCaller;\\n            }\\n        }\\n\\n        revert(\\\"_lastExternalCaller: end of stack\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the most recent caller of this contract.\\n     *\\n     * Last caller may also be the current contract.\\n     *\\n     * If the call is directly to the contract, without passing an Extendable, return `msg.sender` instead\\n     */\\n    function _lastCaller() internal view returns(address) {\\n        CallerState storage state = CallerContextStorage._getState();\\n        if (state.callerStack.length > 0)\\n            return state.callerStack[state.callerStack.length - 1];\\n        else\\n            return msg.sender;\\n    }\\n}\",\"keccak256\":\"0xc3d509c7663a1fd19f9ed58d37ec9e92353e9a3d51057b61f68b175dc117bfc9\",\"license\":\"MIT\"},\"@violetprotocol/extendable/utils/Internal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Internal contract base inherited by InternalExtension to allow access\\n *      to `_internal` modifier for functions that should only be callable by\\n *      other Extensions of the current contract thus keeping the functions\\n *      'internal' with respects to Extendable contract scope.\\n *\\n * Modify your functions with `_internal` to restrict callers to only originate\\n * from the current Extendable contract.\\n *\\n * Note that due to the nature of cross-Extension calls, they are deemed as external\\n * calls and thus your functions must counterintuitively be marked as both:\\n *\\n * `public _internal`\\n *\\n * function yourFunction() public _internal {}\\n*/\\n\\ncontract Internal {\\n    modifier _internal() {\\n        require(msg.sender == address(this), \\\"external caller not allowed\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x1e6ce4acd8f2fec131bd1d8f525c51874cf7c132fe5b6d5764059a97571b5934\",\"license\":\"MIT\"},\"contracts/Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport {IGetterLogic} from '@violetprotocol/erc721extendable/contracts/extensions/base/getter/IGetterLogic.sol';\\n\\n/*\\n  A faucet leveraging Humanbound Tokens (https://humanbound.xyz/) to provide Sybil-resistance.\\n*/\\ncontract HumanboundTokenGatedFaucet is Ownable {\\n  // Emitted when someone claim funds from the faucet\\n  event Dripped(address recipient, uint256 amount);\\n  // Emitted when an owner withdraw funds\\n  event Withdrawn(address recipient, uint256 amount);\\n\\n  // Stored address of the Humanbound Token contract\\n  address public hbtContract;\\n  // Amount to drip\\n  uint128 public dripAmount;\\n  // Upon a successful drip, an address cannot\\n  // claim funds again until this time lock has elapsed\\n  uint128 public timeLockInSeconds;\\n  // Recording when the last drip happened by address\\n  mapping(address => uint256) public lastDrip;\\n\\n  constructor(\\n    address hbtContract_,\\n    uint128 dripAmount_,\\n    uint128 timeLockInSeconds_\\n  ) payable {\\n    hbtContract = hbtContract_;\\n    dripAmount = dripAmount_;\\n    timeLockInSeconds = timeLockInSeconds_;\\n  }\\n\\n  modifier onlyHBTOwners() {\\n    // Verify HBT ownership\\n    require(\\n      IGetterLogic(hbtContract).balanceOf(msg.sender) > 0,\\n      'Unauthorized: Ownership of a Humanbound Token is required'\\n    );\\n    _;\\n  }\\n\\n  receive() external payable {}\\n\\n  fallback() external payable {}\\n\\n  function getBalance() public view returns (uint) {\\n    return address(this).balance;\\n  }\\n\\n  function getStatus()\\n    public\\n    view\\n    returns (\\n      uint256 balance_,\\n      address hbtContract_,\\n      uint128 dripAmount_,\\n      uint128 timeLockInSeconds_\\n    )\\n  {\\n    return (address(this).balance, hbtContract, dripAmount, timeLockInSeconds);\\n  }\\n\\n  function drip() external onlyHBTOwners {\\n    require(\\n      block.timestamp > lastDrip[msg.sender] + timeLockInSeconds,\\n      'You reached your quota. Come back after the cooldown period.'\\n    );\\n    lastDrip[msg.sender] = block.timestamp;\\n\\n    (bool sent, ) = msg.sender.call{value: dripAmount}('');\\n    require(sent, 'Failed to drip ETH. Is there enough funds?');\\n\\n    emit Dripped(msg.sender, dripAmount);\\n  }\\n\\n  function updateHBTContractAddress(address newHBTContractAddress) external onlyOwner {\\n    hbtContract = newHBTContractAddress;\\n  }\\n\\n  function updateDripAmount(uint128 newAmount) external onlyOwner {\\n    dripAmount = newAmount;\\n  }\\n\\n  function updateTimeLock(uint128 newTimeLock) external onlyOwner {\\n    timeLockInSeconds = newTimeLock;\\n  }\\n\\n  function withdraw(uint256 amount) external onlyOwner {\\n    _withdraw(amount);\\n  }\\n\\n  function withdrawAll() external onlyOwner {\\n    uint256 thisBalance = address(this).balance;\\n\\n    _withdraw(thisBalance);\\n  }\\n\\n  function _withdraw(uint256 amount) private {\\n    address recipient = msg.sender;\\n\\n    (bool sent, ) = recipient.call{value: amount}('');\\n    require(sent, 'Failed withdrawing ETH');\\n\\n    emit Withdrawn(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x6b599e9e794143d9771640ebc76f3e7434b6fa083bb6396910f01d4ebb1afe9b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040516200158938038062001589833981810160405281019062000029919062000288565b620000496200003d6200010560201b60201c565b6200010d60201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080600260106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505050620002e4565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020382620001d6565b9050919050565b6200021581620001f6565b81146200022157600080fd5b50565b60008151905062000235816200020a565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b62000262816200023b565b81146200026e57600080fd5b50565b600081519050620002828162000257565b92915050565b600080600060608486031215620002a457620002a3620001d1565b5b6000620002b48682870162000224565b9350506020620002c78682870162000271565b9250506040620002da8682870162000271565b9150509250925092565b61129580620002f46000396000f3fe6080604052600436106100ec5760003560e01c8063715018a61161008a57806398caffc61161005957806398caffc6146102b55780639f678cca146102e0578063cfb530de146102f7578063f2fde38b14610320576100f3565b8063715018a6146102335780637c5e59ee1461024a578063853828b6146102735780638da5cb5b1461028a576100f3565b80632e1a7d4d116100c65780632e1a7d4d1461018857806335a1529b146101b15780634e69d560146101dc578063553659391461020a576100f3565b80630762fde3146100f55780630935f0041461012057806312065fe01461015d576100f3565b366100f357005b005b34801561010157600080fd5b5061010a610349565b6040516101179190610b94565b60405180910390f35b34801561012c57600080fd5b5061014760048036038101906101429190610c12565b61036b565b6040516101549190610c58565b60405180910390f35b34801561016957600080fd5b50610172610383565b60405161017f9190610c58565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa9190610c9f565b61038b565b005b3480156101bd57600080fd5b506101c661039f565b6040516101d39190610b94565b60405180910390f35b3480156101e857600080fd5b506101f16103c1565b6040516102019493929190610cdb565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190610d4c565b610437565b005b34801561023f57600080fd5b5061024861047b565b005b34801561025657600080fd5b50610271600480360381019061026c9190610d4c565b61048f565b005b34801561027f57600080fd5b506102886104d3565b005b34801561029657600080fd5b5061029f6104ec565b6040516102ac9190610d79565b60405180910390f35b3480156102c157600080fd5b506102ca610515565b6040516102d79190610d79565b60405180910390f35b3480156102ec57600080fd5b506102f561053b565b005b34801561030357600080fd5b5061031e60048036038101906103199190610c12565b610860565b005b34801561032c57600080fd5b5061034760048036038101906103429190610c12565b6108ac565b005b600260109054906101000a90046fffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b600047905090565b610393610930565b61039c816109ae565b50565b600260009054906101000a90046fffffffffffffffffffffffffffffffff1681565b60008060008047600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a90046fffffffffffffffffffffffffffffffff16600260109054906101000a90046fffffffffffffffffffffffffffffffff16935093509350935090919293565b61043f610930565b80600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b610483610930565b61048d6000610a9d565b565b610497610930565b80600260106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b6104db610930565b60004790506104e9816109ae565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105989190610d79565b602060405180830381600087803b1580156105b257600080fd5b505af11580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190610da9565b1161062a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062190610e59565b60405180910390fd5b600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106a59190610ea8565b42116106e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dd90610f70565b60405180910390fd5b42600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1660405161078090610fc1565b60006040518083038185875af1925050503d80600081146107bd576040519150601f19603f3d011682016040523d82523d6000602084013e6107c2565b606091505b5050905080610806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd90611048565b60405180910390fd5b7f0daf449977d5acafa35195e10b3eb92f97839892a6653afaba222379b58d8a9b33600260009054906101000a90046fffffffffffffffffffffffffffffffff166040516108559291906110a3565b60405180910390a150565b610868610930565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108b4610930565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b9061113e565b60405180910390fd5b61092d81610a9d565b50565b610938610b61565b73ffffffffffffffffffffffffffffffffffffffff166109566104ec565b73ffffffffffffffffffffffffffffffffffffffff16146109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a3906111aa565b60405180910390fd5b565b600033905060008173ffffffffffffffffffffffffffffffffffffffff16836040516109d990610fc1565b60006040518083038185875af1925050503d8060008114610a16576040519150601f19603f3d011682016040523d82523d6000602084013e610a1b565b606091505b5050905080610a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5690611216565b60405180910390fd5b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58284604051610a90929190611236565b60405180910390a1505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60006fffffffffffffffffffffffffffffffff82169050919050565b610b8e81610b69565b82525050565b6000602082019050610ba96000830184610b85565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bdf82610bb4565b9050919050565b610bef81610bd4565b8114610bfa57600080fd5b50565b600081359050610c0c81610be6565b92915050565b600060208284031215610c2857610c27610baf565b5b6000610c3684828501610bfd565b91505092915050565b6000819050919050565b610c5281610c3f565b82525050565b6000602082019050610c6d6000830184610c49565b92915050565b610c7c81610c3f565b8114610c8757600080fd5b50565b600081359050610c9981610c73565b92915050565b600060208284031215610cb557610cb4610baf565b5b6000610cc384828501610c8a565b91505092915050565b610cd581610bd4565b82525050565b6000608082019050610cf06000830187610c49565b610cfd6020830186610ccc565b610d0a6040830185610b85565b610d176060830184610b85565b95945050505050565b610d2981610b69565b8114610d3457600080fd5b50565b600081359050610d4681610d20565b92915050565b600060208284031215610d6257610d61610baf565b5b6000610d7084828501610d37565b91505092915050565b6000602082019050610d8e6000830184610ccc565b92915050565b600081519050610da381610c73565b92915050565b600060208284031215610dbf57610dbe610baf565b5b6000610dcd84828501610d94565b91505092915050565b600082825260208201905092915050565b7f556e617574686f72697a65643a204f776e657273686970206f6620612048756d60008201527f616e626f756e6420546f6b656e20697320726571756972656400000000000000602082015250565b6000610e43603983610dd6565b9150610e4e82610de7565b604082019050919050565b60006020820190508181036000830152610e7281610e36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eb382610c3f565b9150610ebe83610c3f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ef357610ef2610e79565b5b828201905092915050565b7f596f75207265616368656420796f75722071756f74612e20436f6d652062616360008201527f6b2061667465722074686520636f6f6c646f776e20706572696f642e00000000602082015250565b6000610f5a603c83610dd6565b9150610f6582610efe565b604082019050919050565b60006020820190508181036000830152610f8981610f4d565b9050919050565b600081905092915050565b50565b6000610fab600083610f90565b9150610fb682610f9b565b600082019050919050565b6000610fcc82610f9e565b9150819050919050565b7f4661696c656420746f2064726970204554482e20497320746865726520656e6f60008201527f7567682066756e64733f00000000000000000000000000000000000000000000602082015250565b6000611032602a83610dd6565b915061103d82610fd6565b604082019050919050565b6000602082019050818103600083015261106181611025565b9050919050565b6000819050919050565b600061108d61108861108384610b69565b611068565b610c3f565b9050919050565b61109d81611072565b82525050565b60006040820190506110b86000830185610ccc565b6110c56020830184611094565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611128602683610dd6565b9150611133826110cc565b604082019050919050565b600060208201905081810360008301526111578161111b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611194602083610dd6565b915061119f8261115e565b602082019050919050565b600060208201905081810360008301526111c381611187565b9050919050565b7f4661696c6564207769746864726177696e672045544800000000000000000000600082015250565b6000611200601683610dd6565b915061120b826111ca565b602082019050919050565b6000602082019050818103600083015261122f816111f3565b9050919050565b600060408201905061124b6000830185610ccc565b6112586020830184610c49565b939250505056fea2646970667358221220c88a71abeb08a383ab76f8bff5d8ececf882b3ff97349cf642ce6f54afa49f7764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c8063715018a61161008a57806398caffc61161005957806398caffc6146102b55780639f678cca146102e0578063cfb530de146102f7578063f2fde38b14610320576100f3565b8063715018a6146102335780637c5e59ee1461024a578063853828b6146102735780638da5cb5b1461028a576100f3565b80632e1a7d4d116100c65780632e1a7d4d1461018857806335a1529b146101b15780634e69d560146101dc578063553659391461020a576100f3565b80630762fde3146100f55780630935f0041461012057806312065fe01461015d576100f3565b366100f357005b005b34801561010157600080fd5b5061010a610349565b6040516101179190610b94565b60405180910390f35b34801561012c57600080fd5b5061014760048036038101906101429190610c12565b61036b565b6040516101549190610c58565b60405180910390f35b34801561016957600080fd5b50610172610383565b60405161017f9190610c58565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa9190610c9f565b61038b565b005b3480156101bd57600080fd5b506101c661039f565b6040516101d39190610b94565b60405180910390f35b3480156101e857600080fd5b506101f16103c1565b6040516102019493929190610cdb565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190610d4c565b610437565b005b34801561023f57600080fd5b5061024861047b565b005b34801561025657600080fd5b50610271600480360381019061026c9190610d4c565b61048f565b005b34801561027f57600080fd5b506102886104d3565b005b34801561029657600080fd5b5061029f6104ec565b6040516102ac9190610d79565b60405180910390f35b3480156102c157600080fd5b506102ca610515565b6040516102d79190610d79565b60405180910390f35b3480156102ec57600080fd5b506102f561053b565b005b34801561030357600080fd5b5061031e60048036038101906103199190610c12565b610860565b005b34801561032c57600080fd5b5061034760048036038101906103429190610c12565b6108ac565b005b600260109054906101000a90046fffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b600047905090565b610393610930565b61039c816109ae565b50565b600260009054906101000a90046fffffffffffffffffffffffffffffffff1681565b60008060008047600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a90046fffffffffffffffffffffffffffffffff16600260109054906101000a90046fffffffffffffffffffffffffffffffff16935093509350935090919293565b61043f610930565b80600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b610483610930565b61048d6000610a9d565b565b610497610930565b80600260106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b6104db610930565b60004790506104e9816109ae565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105989190610d79565b602060405180830381600087803b1580156105b257600080fd5b505af11580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190610da9565b1161062a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062190610e59565b60405180910390fd5b600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106a59190610ea8565b42116106e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dd90610f70565b60405180910390fd5b42600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1660405161078090610fc1565b60006040518083038185875af1925050503d80600081146107bd576040519150601f19603f3d011682016040523d82523d6000602084013e6107c2565b606091505b5050905080610806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd90611048565b60405180910390fd5b7f0daf449977d5acafa35195e10b3eb92f97839892a6653afaba222379b58d8a9b33600260009054906101000a90046fffffffffffffffffffffffffffffffff166040516108559291906110a3565b60405180910390a150565b610868610930565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108b4610930565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b9061113e565b60405180910390fd5b61092d81610a9d565b50565b610938610b61565b73ffffffffffffffffffffffffffffffffffffffff166109566104ec565b73ffffffffffffffffffffffffffffffffffffffff16146109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a3906111aa565b60405180910390fd5b565b600033905060008173ffffffffffffffffffffffffffffffffffffffff16836040516109d990610fc1565b60006040518083038185875af1925050503d8060008114610a16576040519150601f19603f3d011682016040523d82523d6000602084013e610a1b565b606091505b5050905080610a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5690611216565b60405180910390fd5b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58284604051610a90929190611236565b60405180910390a1505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60006fffffffffffffffffffffffffffffffff82169050919050565b610b8e81610b69565b82525050565b6000602082019050610ba96000830184610b85565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bdf82610bb4565b9050919050565b610bef81610bd4565b8114610bfa57600080fd5b50565b600081359050610c0c81610be6565b92915050565b600060208284031215610c2857610c27610baf565b5b6000610c3684828501610bfd565b91505092915050565b6000819050919050565b610c5281610c3f565b82525050565b6000602082019050610c6d6000830184610c49565b92915050565b610c7c81610c3f565b8114610c8757600080fd5b50565b600081359050610c9981610c73565b92915050565b600060208284031215610cb557610cb4610baf565b5b6000610cc384828501610c8a565b91505092915050565b610cd581610bd4565b82525050565b6000608082019050610cf06000830187610c49565b610cfd6020830186610ccc565b610d0a6040830185610b85565b610d176060830184610b85565b95945050505050565b610d2981610b69565b8114610d3457600080fd5b50565b600081359050610d4681610d20565b92915050565b600060208284031215610d6257610d61610baf565b5b6000610d7084828501610d37565b91505092915050565b6000602082019050610d8e6000830184610ccc565b92915050565b600081519050610da381610c73565b92915050565b600060208284031215610dbf57610dbe610baf565b5b6000610dcd84828501610d94565b91505092915050565b600082825260208201905092915050565b7f556e617574686f72697a65643a204f776e657273686970206f6620612048756d60008201527f616e626f756e6420546f6b656e20697320726571756972656400000000000000602082015250565b6000610e43603983610dd6565b9150610e4e82610de7565b604082019050919050565b60006020820190508181036000830152610e7281610e36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eb382610c3f565b9150610ebe83610c3f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ef357610ef2610e79565b5b828201905092915050565b7f596f75207265616368656420796f75722071756f74612e20436f6d652062616360008201527f6b2061667465722074686520636f6f6c646f776e20706572696f642e00000000602082015250565b6000610f5a603c83610dd6565b9150610f6582610efe565b604082019050919050565b60006020820190508181036000830152610f8981610f4d565b9050919050565b600081905092915050565b50565b6000610fab600083610f90565b9150610fb682610f9b565b600082019050919050565b6000610fcc82610f9e565b9150819050919050565b7f4661696c656420746f2064726970204554482e20497320746865726520656e6f60008201527f7567682066756e64733f00000000000000000000000000000000000000000000602082015250565b6000611032602a83610dd6565b915061103d82610fd6565b604082019050919050565b6000602082019050818103600083015261106181611025565b9050919050565b6000819050919050565b600061108d61108861108384610b69565b611068565b610c3f565b9050919050565b61109d81611072565b82525050565b60006040820190506110b86000830185610ccc565b6110c56020830184611094565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611128602683610dd6565b9150611133826110cc565b604082019050919050565b600060208201905081810360008301526111578161111b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611194602083610dd6565b915061119f8261115e565b602082019050919050565b600060208201905081810360008301526111c381611187565b9050919050565b7f4661696c6564207769746864726177696e672045544800000000000000000000600082015250565b6000611200601683610dd6565b915061120b826111ca565b602082019050919050565b6000602082019050818103600083015261122f816111f3565b9050919050565b600060408201905061124b6000830185610ccc565b6112586020830184610c49565b939250505056fea2646970667358221220c88a71abeb08a383ab76f8bff5d8ececf882b3ff97349cf642ce6f54afa49f7764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2299,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "hbtContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2301,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "dripAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint128"
      },
      {
        "astId": 2303,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "timeLockInSeconds",
        "offset": 16,
        "slot": "2",
        "type": "t_uint128"
      },
      {
        "astId": 2307,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "lastDrip",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}