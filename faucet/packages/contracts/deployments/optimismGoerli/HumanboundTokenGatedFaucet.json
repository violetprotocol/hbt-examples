{
  "address": "0xd77C3840dE2C630bD503E812ddE73dA0d5e26A8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hbtContract_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dripAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeLockInSeconds",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Dripped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "drip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hbtContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDrip",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "updateDripAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newHBTContractAddress",
          "type": "address"
        }
      ],
      "name": "updateHBTContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTimeLock",
          "type": "uint256"
        }
      ],
      "name": "updateTimeLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd23a264e1c42cb563a4bdcc5b37aa03c800a62fc7257fa0d3ab39c221a689fa9",
  "receipt": {
    "to": null,
    "from": "0x25AF0ccA791baEe922D9fa0744880ae6E0422021",
    "contractAddress": "0xd77C3840dE2C630bD503E812ddE73dA0d5e26A8F",
    "transactionIndex": 0,
    "gasUsed": "1009583",
    "logsBloom": "0x
    "blockHash": "0x031a0609274e9cfb3762b8ac08afb6f8ba25cdfdbb2d8a40439d037c74df96a6",
    "transactionHash": "0xd23a264e1c42cb563a4bdcc5b37aa03c800a62fc7257fa0d3ab39c221a689fa9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2695324,
        "transactionHash": "0xd23a264e1c42cb563a4bdcc5b37aa03c800a62fc7257fa0d3ab39c221a689fa9",
        "address": "0xd77C3840dE2C630bD503E812ddE73dA0d5e26A8F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000025af0cca791baee922d9fa0744880ae6e0422021"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x031a0609274e9cfb3762b8ac08afb6f8ba25cdfdbb2d8a40439d037c74df96a6"
      }
    ],
    "blockNumber": 2695324,
    "cumulativeGasUsed": "1009583",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5e5007bdd3eb92575499e17eabdd411b42cf79c0",
    "10000000000000000",
    86400
  ],
  "numDeployments": 1,
  "solcInputHash": "12017354e5a61bb547cd3c9852a74f45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hbtContract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dripAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLockInSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"drip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hbtContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateDripAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newHBTContractAddress\",\"type\":\"address\"}],\"name\":\"updateHBTContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimeLock\",\"type\":\"uint256\"}],\"name\":\"updateTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Faucet.sol\":\"HumanboundTokenGatedFaucet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@violetprotocol/erc721extendable/contracts/extensions/base/getter/IGetterLogic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@violetprotocol/extendable/extensions/InternalExtension.sol\\\";\\n\\ninterface IGetterLogic {\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) external returns (address);\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) external returns (address);\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external returns (bool);\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     *\\n     * Requirements:\\n     *\\n     * - Must be modified with `public _internal`.\\n     */\\n    function _exists(uint256 tokenId) external returns (bool);\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     * - Must be modified with `public _internal`.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) external returns (bool);\\n}\\n\\nabstract contract GetterExtension is IGetterLogic, InternalExtension {\\n    /**\\n     * @dev see {IExtension-getSolidityInterface}\\n     */\\n    function getSolidityInterface() public pure virtual override returns (string memory) {\\n        return\\n            \\\"function balanceOf(address owner) external view returns (uint256);\\\\n\\\"\\n            \\\"function ownerOf(uint256 tokenId) external view returns (address);\\\\n\\\"\\n            \\\"function getApproved(uint256 tokenId) external view returns (address);\\\\n\\\"\\n            \\\"function isApprovedForAll(address owner, address operator) external view returns (bool);\\\\n\\\"\\n            \\\"function _exists(uint256 tokenId) external view returns (bool);\\\\n\\\"\\n            \\\"function _isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\\\n\\\";\\n    }\\n\\n    /**\\n     * @dev see {IExtension-getInterface}\\n     */\\n    function getInterface() public virtual override returns (Interface[] memory interfaces) {\\n        interfaces = new Interface[](1);\\n\\n        bytes4[] memory functions = new bytes4[](6);\\n        functions[0] = IGetterLogic.balanceOf.selector;\\n        functions[1] = IGetterLogic.ownerOf.selector;\\n        functions[2] = IGetterLogic.getApproved.selector;\\n        functions[3] = IGetterLogic.isApprovedForAll.selector;\\n        functions[4] = IGetterLogic._exists.selector;\\n        functions[5] = IGetterLogic._isApprovedOrOwner.selector;\\n\\n        interfaces[0] = Interface(type(IGetterLogic).interfaceId, functions);\\n    }\\n}\\n\",\"keccak256\":\"0x24e1c63f5bba5fb6ce45282650d66874fa787007785be3af308d005714a9f08e\",\"license\":\"MIT\"},\"@violetprotocol/extendable/erc165/IERC165Logic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external returns (bool);\\n}\\n\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Uses Extendable storage pattern to populate the registered interfaces storage variable.\\n */\\ninterface IERC165Register {\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function registerInterface(bytes4 interfaceId) external;\\n}\",\"keccak256\":\"0x4eff75b3b1814f99866e004b68cb1d7fd48bb1ff89854a0d3bb90ac6e293c9e6\",\"license\":\"MIT\"},\"@violetprotocol/extendable/errors/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev  ExtensionNotImplemented error is emitted by Extendable and Extensions\\n *       where no implementation for a specified function signature exists\\n *       in the contract\\n*/\\nerror ExtensionNotImplemented();\\n\\n\\n/**\\n * @dev  Utility library for contracts to catch custom errors\\n *       Pass in a return `result` from a call, and the selector for your error message\\n *       and the `catchCustomError` function will return `true` if the error was found\\n *       or `false` otherwise\\n*/\\nlibrary Errors {\\n    function catchCustomError(bytes memory result, bytes4 errorSelector) internal pure returns(bool) {\\n        bytes4 caught;\\n        assembly {\\n            caught := mload(add(result, 0x20))\\n        }\\n\\n        return caught == errorSelector;\\n    }\\n}\",\"keccak256\":\"0x3c5581551798f973fe70339bf5313d5be3446df69680bf878c695108beff1bc8\",\"license\":\"MIT\"},\"@violetprotocol/extendable/extensions/Extension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IExtension.sol\\\";\\nimport \\\"../errors/Errors.sol\\\";\\nimport \\\"../utils/CallerContext.sol\\\";\\nimport \\\"../erc165/IERC165Logic.sol\\\";\\n\\n/**\\n *  ______  __  __  ______  ______  __   __  _____   ______  ______  __      ______    \\n * /\\\\  ___\\\\/\\\\_\\\\_\\\\_\\\\/\\\\__  _\\\\/\\\\  ___\\\\/\\\\ \\\"-.\\\\ \\\\/\\\\  __-./\\\\  __ \\\\/\\\\  == \\\\/\\\\ \\\\    /\\\\  ___\\\\\\n * \\\\ \\\\  __\\\\\\\\/_/\\\\_\\\\/\\\\/_/\\\\ \\\\/\\\\ \\\\  __\\\\\\\\ \\\\ \\\\-.  \\\\ \\\\ \\\\/\\\\ \\\\ \\\\  __ \\\\ \\\\  __<\\\\ \\\\ \\\\___\\\\ \\\\  __\\\\\\n *  \\\\ \\\\_____\\\\/\\\\_\\\\/\\\\_\\\\ \\\\ \\\\_\\\\ \\\\ \\\\_____\\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\ \\\\____-\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_____\\\\ \\\\_____\\\\ \\\\_____\\\\\\n *   \\\\/_____/\\\\/_/\\\\/_/  \\\\/_/  \\\\/_____/\\\\/_/ \\\\/_/\\\\/____/ \\\\/_/\\\\/_/\\\\/_____/\\\\/_____/\\\\/_____/\\n *\\n *  Base contract for Extensions in the Extendable Framework\\n *  \\n *  Inherit and implement this contract to create Extension contracts!\\n *\\n *  Implements the EIP-165 standard for interface detection of implementations during runtime.\\n *  Uses the ERC165 singleton pattern where the actual implementation logic of the interface is\\n *  deployed in a separate contract. See ERC165Logic. Deterministic deployment guarantees the\\n *  ERC165Logic contract to always exist as static address 0x16C940672fA7820C36b2123E657029d982629070\\n *\\n *  Define your custom Extension interface and implement it whilst inheriting this contract:\\n *      contract YourExtension is IYourExtension, Extension {...}\\n *\\n */\\nabstract contract Extension is CallerContext, IExtension, IERC165, IERC165Register {\\n    address constant ERC165LogicAddress = 0x16C940672fA7820C36b2123E657029d982629070;\\n\\n    /**\\n     * @dev Constructor registers your custom Extension interface under EIP-165:\\n     *      https://eips.ethereum.org/EIPS/eip-165\\n    */\\n    constructor() {\\n        Interface[] memory interfaces = getInterface();\\n        for (uint256 i = 0; i < interfaces.length; i++) {\\n            Interface memory iface = interfaces[i];\\n            registerInterface(iface.interfaceId);\\n\\n            for (uint256 j = 0; j < iface.functions.length; j++) {\\n                registerInterface(iface.functions[j]);\\n            }\\n        }\\n\\n        registerInterface(type(IExtension).interfaceId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external override virtual returns(bool) {\\n        (bool success, bytes memory result) = ERC165LogicAddress.delegatecall(abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", interfaceId));\\n\\n        if (!success) {\\n            assembly {\\n                revert(result, returndatasize())\\n            }\\n        }\\n\\n        return abi.decode(result, (bool));\\n    }\\n\\n    function registerInterface(bytes4 interfaceId) public override virtual {\\n        (bool success, ) = ERC165LogicAddress.delegatecall(abi.encodeWithSignature(\\\"registerInterface(bytes4)\\\", interfaceId));\\n\\n        if (!success) {\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unidentified function signature calls to any Extension reverts with\\n     *      ExtensionNotImplemented error\\n    */\\n    function _fallback() internal virtual {\\n        revert ExtensionNotImplemented();\\n    }\\n\\n    /**\\n     * @dev Fallback function passes to internal _fallback() logic\\n    */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n    \\n    /**\\n     * @dev Payable fallback function passes to internal _fallback() logic\\n    */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Virtual override declaration of getFunctionSelectors() function to silence compiler\\n     *\\n     * Must be implemented in inherited contract.\\n    */\\n    function getInterface() override public virtual returns(Interface[] memory);\\n}\",\"keccak256\":\"0x4cd611549baf99c139ca1842fabf2ee97627cf856c6348efcc4186a0f0161ceb\",\"license\":\"MIT\"},\"@violetprotocol/extendable/extensions/IExtension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct Interface {\\n    bytes4 interfaceId;\\n    bytes4[] functions;\\n}\\n\\n/**\\n * @dev Interface for Extension\\n*/\\ninterface IExtension {\\n    /**\\n     * @dev Returns a full view of the functional interface of the extension\\n     *\\n     * Must return a list of the functions in the interface of your custom Extension\\n     * in the same format and syntax as in the interface itself as a string, \\n     * escaped-newline separated.\\n     *\\n     * OPEN TO SUGGESTIONS FOR IMPROVEMENT ON THIS METHODOLOGY FOR \\n     * DEEP DESCRIPTIVE RUNTIME INTROSPECTION\\n     *\\n     * Intent is to allow developers that want to integrate with an Extendable contract\\n     * that will have a constantly evolving interface, due to the nature of Extendables,\\n     * to be able to easily inspect and query for the current state of the interface and\\n     * integrate with it.\\n     *\\n     * See {ExtendLogic-getSolidityInterface} for an example.\\n    */\\n    function getSolidityInterface() external pure returns(string memory);\\n\\n    /**\\n     * @dev Returns the interface IDs that are implemented by the Extension\\n     *\\n     * These are full interface IDs and ARE NOT function selectors. Full interface IDs are\\n     * XOR'd function selectors of an interface. For example the interface ID of the ERC721\\n     * interface is 0x80ac58cd determined by the XOR or all function selectors of the interface.\\n     * \\n     * If an interface only consists of a single function, then the interface ID is identical\\n     * to that function selector.\\n     * \\n     * Provides a simple abstraction from the developer for any custom Extension to \\n     * be EIP-165 compliant out-of-the-box simply by implementing this function. \\n     *\\n     * Excludes any functions either already described by other interface definitions\\n     * that are not developed on top of this backbone i.e. EIP-165, IExtension\\n    */\\n    function getInterface() external returns(Interface[] memory interfaces);\\n}\",\"keccak256\":\"0xf23958c9a1107b5561f081620a3223ca73ce1f3c573137d7f851dac852908912\",\"license\":\"MIT\"},\"@violetprotocol/extendable/extensions/InternalExtension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Extension.sol\\\";\\nimport \\\"../utils/Internal.sol\\\";\\nimport \\\"../errors/Errors.sol\\\";\\n\\n/**\\n *  ______  __  __  ______  ______  __   __  _____   ______  ______  __      ______    \\n * /\\\\  ___\\\\/\\\\_\\\\_\\\\_\\\\/\\\\__  _\\\\/\\\\  ___\\\\/\\\\ \\\"-.\\\\ \\\\/\\\\  __-./\\\\  __ \\\\/\\\\  == \\\\/\\\\ \\\\    /\\\\  ___\\\\\\n * \\\\ \\\\  __\\\\\\\\/_/\\\\_\\\\/\\\\/_/\\\\ \\\\/\\\\ \\\\  __\\\\\\\\ \\\\ \\\\-.  \\\\ \\\\ \\\\/\\\\ \\\\ \\\\  __ \\\\ \\\\  __<\\\\ \\\\ \\\\___\\\\ \\\\  __\\\\\\n *  \\\\ \\\\_____\\\\/\\\\_\\\\/\\\\_\\\\ \\\\ \\\\_\\\\ \\\\ \\\\_____\\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\ \\\\____-\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_____\\\\ \\\\_____\\\\ \\\\_____\\\\\\n *   \\\\/_____/\\\\/_/\\\\/_/  \\\\/_/  \\\\/_____/\\\\/_/ \\\\/_/\\\\/____/ \\\\/_/\\\\/_/\\\\/_____/\\\\/_____/\\\\/_____/\\n *\\n *  Base contract for Internal Extensions in the Extendable Framework\\n *  \\n *  Internal Extensions are used to house common functions that are used by other contract extensions.\\n *  This is used to make internal functions usable across all your extensions without exposing it\\n *  to the external world.\\n *\\n *  Define your custom Extension interface and implement it whilst inheriting this contract:\\n *      contract YourExtension is IYourExtension, InternalExtension {...}\\n *\\n *  Then define your function and simply modify it in the following way:\\n *      contract YourExtension is IYourExtension, InternalExtension {\\n *          function _someFunc() public _internal {}\\n *      }\\n *   \\n *  Notice that your internal function carries both the `public` visibility modifier and the `_internal` \\n *  modifier. This is because cross-extension calls are resolved as external calls and `public` allows\\n *  your other extensions to call them whilst `_internal` restricts callers to only extensions of the\\n *  same contract.\\n *\\n *  Note:\\n *  Use underscores `_` as internal function prefixes as general naming convention.\\n */\\nabstract contract InternalExtension is Internal, Extension {}\",\"keccak256\":\"0xf7fdaf54b910732821db42f48f7022ea503a47370cf970af66dabcffae2ea2ed\",\"license\":\"MIT\"},\"@violetprotocol/extendable/storage/CallerContextStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct CallerState {\\n    // Stores a list of callers in the order they are received\\n    // The current caller context is always the last-most address\\n    address[] callerStack;\\n}\\n\\nlibrary CallerContextStorage {\\n    bytes32 constant private STORAGE_NAME = keccak256(\\\"extendable.framework.v1:caller-state\\\");\\n\\n    function _getState()\\n        internal \\n        view\\n        returns (CallerState storage callerState) \\n    {\\n        bytes32 position = keccak256(abi.encodePacked(address(this), STORAGE_NAME));\\n        assembly {\\n            callerState.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xb6b7176b4b1ec6e80aae63770c518144f514c36af1812e754d4c489f31e800d2\",\"license\":\"MIT\"},\"@violetprotocol/extendable/utils/CallerContext.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {CallerState, CallerContextStorage} from \\\"../storage/CallerContextStorage.sol\\\";\\n\\n/**\\n * @dev CallerContext contract provides Extensions with proper caller-scoped contexts.\\n *      Inherit this contract with your Extension to make use of caller references.\\n *\\n * `msg.sender` may not behave as developer intends when using within Extensions as many\\n * calls may be exchanged between intra-contract extensions which result in a `msg.sender` as self.\\n * Instead of using `msg.sender`, replace it with \\n *      - `_lastExternalCaller()` for the most recent caller in the call chain that is external to this contract\\n *      - `_lastCaller()` for the most recent caller\\n *\\n * CallerContext provides a deep callstack to track the caller of the Extension/Extendable contract\\n * at any point in the execution cycle.\\n *\\n*/\\ncontract CallerContext {\\n    /**\\n     * @dev Returns the most recent caller of this contract that came from outside this contract.\\n     *\\n     * Used by extensions that require fetching msg.sender that aren't cross-extension calls.\\n     * Cross-extension calls resolve msg.sender as the current contract and so the actual\\n     * caller context is obfuscated.\\n     * \\n     * This function should be used in place of `msg.sender` where external callers are read.\\n     */\\n    function _lastExternalCaller() internal view returns(address) {\\n        CallerState storage state = CallerContextStorage._getState();\\n\\n        for (uint i = state.callerStack.length - 1; i >= 0; i--) {\\n            address lastSubsequentCaller = state.callerStack[i];\\n            if (lastSubsequentCaller != address(this)) {\\n                return lastSubsequentCaller;\\n            }\\n        }\\n\\n        revert(\\\"_lastExternalCaller: end of stack\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the most recent caller of this contract.\\n     *\\n     * Last caller may also be the current contract.\\n     *\\n     * If the call is directly to the contract, without passing an Extendable, return `msg.sender` instead\\n     */\\n    function _lastCaller() internal view returns(address) {\\n        CallerState storage state = CallerContextStorage._getState();\\n        if (state.callerStack.length > 0)\\n            return state.callerStack[state.callerStack.length - 1];\\n        else\\n            return msg.sender;\\n    }\\n}\",\"keccak256\":\"0xc3d509c7663a1fd19f9ed58d37ec9e92353e9a3d51057b61f68b175dc117bfc9\",\"license\":\"MIT\"},\"@violetprotocol/extendable/utils/Internal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Internal contract base inherited by InternalExtension to allow access\\n *      to `_internal` modifier for functions that should only be callable by\\n *      other Extensions of the current contract thus keeping the functions\\n *      'internal' with respects to Extendable contract scope.\\n *\\n * Modify your functions with `_internal` to restrict callers to only originate\\n * from the current Extendable contract.\\n *\\n * Note that due to the nature of cross-Extension calls, they are deemed as external\\n * calls and thus your functions must counterintuitively be marked as both:\\n *\\n * `public _internal`\\n *\\n * function yourFunction() public _internal {}\\n*/\\n\\ncontract Internal {\\n    modifier _internal() {\\n        require(msg.sender == address(this), \\\"external caller not allowed\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x1e6ce4acd8f2fec131bd1d8f525c51874cf7c132fe5b6d5764059a97571b5934\",\"license\":\"MIT\"},\"contracts/Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IGetterLogic } from \\\"@violetprotocol/erc721extendable/contracts/extensions/base/getter/IGetterLogic.sol\\\";\\n\\n/*\\n  A faucet with Sybil-resistance thanks to Humanbound Tokens.\\n*/\\ncontract HumanboundTokenGatedFaucet is Ownable {\\n  // Emitted when someone claim funds from the faucet\\n  event Dripped(address recipient, uint256 amount);\\n  // Emitted when an owner withdraw funds\\n  event Withdrawn(address recipient, uint256 amount);\\n\\n  // Stored address of the Humanbound Token contract\\n  address public hbtContract;\\n  // Amount to drip\\n  uint256 public  dripAmount;\\n  // Upon a successful drip, an address cannot\\n  // claim funds again until this time lock has elapsed\\n  uint256 public timeLock;\\n  // Recording when the last drip happened by address\\n  mapping (address => uint256) public lastDrip;\\n\\n  constructor(address hbtContract_, uint256 dripAmount_, uint256 timeLockInSeconds) payable {\\n    hbtContract = hbtContract_;\\n    dripAmount = dripAmount_;\\n    timeLock = timeLockInSeconds;\\n  }\\n\\n   modifier onlyHBTOwners {\\n      // Verify HBT ownership\\n      require(IGetterLogic(hbtContract).balanceOf(msg.sender) > 0, \\\"Unauthorized: Ownership of a Humanbound Token is required\\\");\\n      _;\\n    }\\n\\n  receive() external payable {}\\n\\n  fallback() external payable {}\\n\\n  function getBalance() public view returns (uint) {\\n    return address(this).balance;\\n  }\\n\\n  function drip() external onlyHBTOwners {\\n    require(block.timestamp > lastDrip[msg.sender] +  timeLock, \\\"You reached your quota. Come back after the cooldown period.\\\");\\n    lastDrip[msg.sender] = block.timestamp;\\n\\n    (bool sent,) = msg.sender.call{value:  dripAmount}(\\\"\\\");\\n    require(sent, \\\"Failed to drip ETH. Is there enough funds?\\\");\\n\\n    emit Dripped(msg.sender,  dripAmount);\\n  }\\n\\n  function updateHBTContractAddress(address newHBTContractAddress) external onlyOwner {\\n     hbtContract = newHBTContractAddress;\\n  }\\n\\n  function updateDripAmount(uint256 newAmount) external onlyOwner {\\n     dripAmount = newAmount;\\n  }\\n\\n  function updateTimeLock(uint256 newTimeLock) external onlyOwner {\\n     timeLock = newTimeLock;\\n  }\\n\\n  function withdraw(uint256 amount) external onlyOwner {\\n    _withdraw(amount);\\n  }\\n\\n  function withdrawAll() external onlyOwner {\\n    uint256 thisBalance = address(this).balance;\\n\\n    _withdraw(thisBalance);\\n  }\\n\\n  function _withdraw(uint256 amount) private {\\n    address recipient = msg.sender;\\n\\n    (bool sent,) = recipient.call{value: amount}(\\\"\\\");\\n    require(sent, \\\"Failed withdrawing ETH\\\");\\n\\n    emit Withdrawn(recipient, amount);\\n  }\\n}\",\"keccak256\":\"0x649a2de498b837141c299b013a31c75a5dd08f8df8dd53bd64b136999c3944b0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040516200120838038062001208833981810160405281019062000029919062000212565b620000496200003d620000a160201b60201c565b620000a960201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600281905550806003819055505050506200026e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019f8262000172565b9050919050565b620001b18162000192565b8114620001bd57600080fd5b50565b600081519050620001d181620001a6565b92915050565b6000819050919050565b620001ec81620001d7565b8114620001f857600080fd5b50565b6000815190506200020c81620001e1565b92915050565b6000806000606084860312156200022e576200022d6200016d565b5b60006200023e86828701620001c0565b93505060206200025186828701620001fb565b92505060406200026486828701620001fb565b9150509250925092565b610f8a806200027e6000396000f3fe6080604052600436106100e15760003560e01c8063853828b61161007f5780639f678cca116100595780639f678cca1461027c578063cfb530de14610293578063d085835a146102bc578063f2fde38b146102e7576100e8565b8063853828b61461020f5780638da5cb5b1461022657806398caffc614610251576100e8565b806330e9c341116100bb57806330e9c3411461017b57806333725c21146101a457806335a1529b146101cd578063715018a6146101f8576100e8565b80630935f004146100ea57806312065fe0146101275780632e1a7d4d14610152576100e8565b366100e857005b005b3480156100f657600080fd5b50610111600480360381019061010c9190610a09565b610310565b60405161011e9190610a4f565b60405180910390f35b34801561013357600080fd5b5061013c610328565b6040516101499190610a4f565b60405180910390f35b34801561015e57600080fd5b5061017960048036038101906101749190610a96565b610330565b005b34801561018757600080fd5b506101a2600480360381019061019d9190610a96565b610344565b005b3480156101b057600080fd5b506101cb60048036038101906101c69190610a96565b610356565b005b3480156101d957600080fd5b506101e2610368565b6040516101ef9190610a4f565b60405180910390f35b34801561020457600080fd5b5061020d61036e565b005b34801561021b57600080fd5b50610224610382565b005b34801561023257600080fd5b5061023b61039b565b6040516102489190610ad2565b60405180910390f35b34801561025d57600080fd5b506102666103c4565b6040516102739190610ad2565b60405180910390f35b34801561028857600080fd5b506102916103ea565b005b34801561029f57600080fd5b506102ba60048036038101906102b59190610a09565b610697565b005b3480156102c857600080fd5b506102d16106e3565b6040516102de9190610a4f565b60405180910390f35b3480156102f357600080fd5b5061030e60048036038101906103099190610a09565b6106e9565b005b60046020528060005260406000206000915090505481565b600047905090565b61033861076d565b610341816107eb565b50565b61034c61076d565b8060038190555050565b61035e61076d565b8060028190555050565b60025481565b61037661076d565b61038060006108da565b565b61038a61076d565b6000479050610398816107eb565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016104479190610ad2565b602060405180830381600087803b15801561046157600080fd5b505af1158015610475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104999190610b02565b116104d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d090610bb2565b60405180910390fd5b600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105269190610c01565b4211610567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055e90610cc9565b60405180910390fd5b42600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff166002546040516105d390610d1a565b60006040518083038185875af1925050503d8060008114610610576040519150601f19603f3d011682016040523d82523d6000602084013e610615565b606091505b5050905080610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065090610da1565b60405180910390fd5b7f0daf449977d5acafa35195e10b3eb92f97839892a6653afaba222379b58d8a9b3360025460405161068c929190610dc1565b60405180910390a150565b61069f61076d565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60035481565b6106f161076d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075890610e5c565b60405180910390fd5b61076a816108da565b50565b61077561099e565b73ffffffffffffffffffffffffffffffffffffffff1661079361039b565b73ffffffffffffffffffffffffffffffffffffffff16146107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090610ec8565b60405180910390fd5b565b600033905060008173ffffffffffffffffffffffffffffffffffffffff168360405161081690610d1a565b60006040518083038185875af1925050503d8060008114610853576040519150601f19603f3d011682016040523d82523d6000602084013e610858565b606091505b505090508061089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390610f34565b60405180910390fd5b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582846040516108cd929190610dc1565b60405180910390a1505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109d6826109ab565b9050919050565b6109e6816109cb565b81146109f157600080fd5b50565b600081359050610a03816109dd565b92915050565b600060208284031215610a1f57610a1e6109a6565b5b6000610a2d848285016109f4565b91505092915050565b6000819050919050565b610a4981610a36565b82525050565b6000602082019050610a646000830184610a40565b92915050565b610a7381610a36565b8114610a7e57600080fd5b50565b600081359050610a9081610a6a565b92915050565b600060208284031215610aac57610aab6109a6565b5b6000610aba84828501610a81565b91505092915050565b610acc816109cb565b82525050565b6000602082019050610ae76000830184610ac3565b92915050565b600081519050610afc81610a6a565b92915050565b600060208284031215610b1857610b176109a6565b5b6000610b2684828501610aed565b91505092915050565b600082825260208201905092915050565b7f556e617574686f72697a65643a204f776e657273686970206f6620612048756d60008201527f616e626f756e6420546f6b656e20697320726571756972656400000000000000602082015250565b6000610b9c603983610b2f565b9150610ba782610b40565b604082019050919050565b60006020820190508181036000830152610bcb81610b8f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c0c82610a36565b9150610c1783610a36565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c4c57610c4b610bd2565b5b828201905092915050565b7f596f75207265616368656420796f75722071756f74612e20436f6d652062616360008201527f6b2061667465722074686520636f6f6c646f776e20706572696f642e00000000602082015250565b6000610cb3603c83610b2f565b9150610cbe82610c57565b604082019050919050565b60006020820190508181036000830152610ce281610ca6565b9050919050565b600081905092915050565b50565b6000610d04600083610ce9565b9150610d0f82610cf4565b600082019050919050565b6000610d2582610cf7565b9150819050919050565b7f4661696c656420746f2064726970204554482e20497320746865726520656e6f60008201527f7567682066756e64733f00000000000000000000000000000000000000000000602082015250565b6000610d8b602a83610b2f565b9150610d9682610d2f565b604082019050919050565b60006020820190508181036000830152610dba81610d7e565b9050919050565b6000604082019050610dd66000830185610ac3565b610de36020830184610a40565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e46602683610b2f565b9150610e5182610dea565b604082019050919050565b60006020820190508181036000830152610e7581610e39565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610eb2602083610b2f565b9150610ebd82610e7c565b602082019050919050565b60006020820190508181036000830152610ee181610ea5565b9050919050565b7f4661696c6564207769746864726177696e672045544800000000000000000000600082015250565b6000610f1e601683610b2f565b9150610f2982610ee8565b602082019050919050565b60006020820190508181036000830152610f4d81610f11565b905091905056fea2646970667358221220eca1d9ddade1755467121bb9dde18ab7e226d828ff493bdae92743467fb7ba9764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c8063853828b61161007f5780639f678cca116100595780639f678cca1461027c578063cfb530de14610293578063d085835a146102bc578063f2fde38b146102e7576100e8565b8063853828b61461020f5780638da5cb5b1461022657806398caffc614610251576100e8565b806330e9c341116100bb57806330e9c3411461017b57806333725c21146101a457806335a1529b146101cd578063715018a6146101f8576100e8565b80630935f004146100ea57806312065fe0146101275780632e1a7d4d14610152576100e8565b366100e857005b005b3480156100f657600080fd5b50610111600480360381019061010c9190610a09565b610310565b60405161011e9190610a4f565b60405180910390f35b34801561013357600080fd5b5061013c610328565b6040516101499190610a4f565b60405180910390f35b34801561015e57600080fd5b5061017960048036038101906101749190610a96565b610330565b005b34801561018757600080fd5b506101a2600480360381019061019d9190610a96565b610344565b005b3480156101b057600080fd5b506101cb60048036038101906101c69190610a96565b610356565b005b3480156101d957600080fd5b506101e2610368565b6040516101ef9190610a4f565b60405180910390f35b34801561020457600080fd5b5061020d61036e565b005b34801561021b57600080fd5b50610224610382565b005b34801561023257600080fd5b5061023b61039b565b6040516102489190610ad2565b60405180910390f35b34801561025d57600080fd5b506102666103c4565b6040516102739190610ad2565b60405180910390f35b34801561028857600080fd5b506102916103ea565b005b34801561029f57600080fd5b506102ba60048036038101906102b59190610a09565b610697565b005b3480156102c857600080fd5b506102d16106e3565b6040516102de9190610a4f565b60405180910390f35b3480156102f357600080fd5b5061030e60048036038101906103099190610a09565b6106e9565b005b60046020528060005260406000206000915090505481565b600047905090565b61033861076d565b610341816107eb565b50565b61034c61076d565b8060038190555050565b61035e61076d565b8060028190555050565b60025481565b61037661076d565b61038060006108da565b565b61038a61076d565b6000479050610398816107eb565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016104479190610ad2565b602060405180830381600087803b15801561046157600080fd5b505af1158015610475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104999190610b02565b116104d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d090610bb2565b60405180910390fd5b600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105269190610c01565b4211610567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055e90610cc9565b60405180910390fd5b42600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff166002546040516105d390610d1a565b60006040518083038185875af1925050503d8060008114610610576040519150601f19603f3d011682016040523d82523d6000602084013e610615565b606091505b5050905080610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065090610da1565b60405180910390fd5b7f0daf449977d5acafa35195e10b3eb92f97839892a6653afaba222379b58d8a9b3360025460405161068c929190610dc1565b60405180910390a150565b61069f61076d565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60035481565b6106f161076d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075890610e5c565b60405180910390fd5b61076a816108da565b50565b61077561099e565b73ffffffffffffffffffffffffffffffffffffffff1661079361039b565b73ffffffffffffffffffffffffffffffffffffffff16146107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090610ec8565b60405180910390fd5b565b600033905060008173ffffffffffffffffffffffffffffffffffffffff168360405161081690610d1a565b60006040518083038185875af1925050503d8060008114610853576040519150601f19603f3d011682016040523d82523d6000602084013e610858565b606091505b505090508061089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390610f34565b60405180910390fd5b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582846040516108cd929190610dc1565b60405180910390a1505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109d6826109ab565b9050919050565b6109e6816109cb565b81146109f157600080fd5b50565b600081359050610a03816109dd565b92915050565b600060208284031215610a1f57610a1e6109a6565b5b6000610a2d848285016109f4565b91505092915050565b6000819050919050565b610a4981610a36565b82525050565b6000602082019050610a646000830184610a40565b92915050565b610a7381610a36565b8114610a7e57600080fd5b50565b600081359050610a9081610a6a565b92915050565b600060208284031215610aac57610aab6109a6565b5b6000610aba84828501610a81565b91505092915050565b610acc816109cb565b82525050565b6000602082019050610ae76000830184610ac3565b92915050565b600081519050610afc81610a6a565b92915050565b600060208284031215610b1857610b176109a6565b5b6000610b2684828501610aed565b91505092915050565b600082825260208201905092915050565b7f556e617574686f72697a65643a204f776e657273686970206f6620612048756d60008201527f616e626f756e6420546f6b656e20697320726571756972656400000000000000602082015250565b6000610b9c603983610b2f565b9150610ba782610b40565b604082019050919050565b60006020820190508181036000830152610bcb81610b8f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c0c82610a36565b9150610c1783610a36565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c4c57610c4b610bd2565b5b828201905092915050565b7f596f75207265616368656420796f75722071756f74612e20436f6d652062616360008201527f6b2061667465722074686520636f6f6c646f776e20706572696f642e00000000602082015250565b6000610cb3603c83610b2f565b9150610cbe82610c57565b604082019050919050565b60006020820190508181036000830152610ce281610ca6565b9050919050565b600081905092915050565b50565b6000610d04600083610ce9565b9150610d0f82610cf4565b600082019050919050565b6000610d2582610cf7565b9150819050919050565b7f4661696c656420746f2064726970204554482e20497320746865726520656e6f60008201527f7567682066756e64733f00000000000000000000000000000000000000000000602082015250565b6000610d8b602a83610b2f565b9150610d9682610d2f565b604082019050919050565b60006020820190508181036000830152610dba81610d7e565b9050919050565b6000604082019050610dd66000830185610ac3565b610de36020830184610a40565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e46602683610b2f565b9150610e5182610dea565b604082019050919050565b60006020820190508181036000830152610e7581610e39565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610eb2602083610b2f565b9150610ebd82610e7c565b602082019050919050565b60006020820190508181036000830152610ee181610ea5565b9050919050565b7f4661696c6564207769746864726177696e672045544800000000000000000000600082015250565b6000610f1e601683610b2f565b9150610f2982610ee8565b602082019050919050565b60006020820190508181036000830152610f4d81610f11565b905091905056fea2646970667358221220eca1d9ddade1755467121bb9dde18ab7e226d828ff493bdae92743467fb7ba9764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2299,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "hbtContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2301,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "dripAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2303,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "timeLock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2307,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "lastDrip",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}