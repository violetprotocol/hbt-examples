{
  "address": "0x8D3891378FC5e1551054A9dEa93603ad308a6D09",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hbtContract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "erc20Contract_",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "nativeTokendDripAmount_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "erc20TokenDripAmount_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeLockInSeconds_",
          "type": "uint128"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isNativeToken",
          "type": "bool"
        }
      ],
      "name": "Dripped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "dripERC20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripNativeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20Contract",
      "outputs": [
        {
          "internalType": "contract ITestERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20TokendDripAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20Contract_",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "nativeTokendDripAmount_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "erc20TokendDripAmount_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeLockInSeconds_",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hbtContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDrip",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeTokendDripAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeLockInSeconds",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newERC20ContractAddress",
          "type": "address"
        }
      ],
      "name": "updateERC20ContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newAmount",
          "type": "uint128"
        }
      ],
      "name": "updateERC20TokenDripAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newHBTContractAddress",
          "type": "address"
        }
      ],
      "name": "updateHBTContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newAmount",
          "type": "uint128"
        }
      ],
      "name": "updateNativeTokenDripAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newTimeLock",
          "type": "uint128"
        }
      ],
      "name": "updateTimeLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc45f3ec68969aa7dd015fb3a7f170b6b9dbc90ef0bd4e0bfa2dcae53cca5b600",
  "receipt": {
    "to": null,
    "from": "0x25AF0ccA791baEe922D9fa0744880ae6E0422021",
    "contractAddress": "0x8D3891378FC5e1551054A9dEa93603ad308a6D09",
    "transactionIndex": 0,
    "gasUsed": "1412639",
    "logsBloom": "0x
    "blockHash": "0x48dfda722e3ff4b0eeda2a584a52babbcc1fcc326e2742433f4e3b262a5b7244",
    "transactionHash": "0xc45f3ec68969aa7dd015fb3a7f170b6b9dbc90ef0bd4e0bfa2dcae53cca5b600",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2888967,
        "transactionHash": "0xc45f3ec68969aa7dd015fb3a7f170b6b9dbc90ef0bd4e0bfa2dcae53cca5b600",
        "address": "0x8D3891378FC5e1551054A9dEa93603ad308a6D09",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000025af0cca791baee922d9fa0744880ae6e0422021"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x48dfda722e3ff4b0eeda2a584a52babbcc1fcc326e2742433f4e3b262a5b7244"
      }
    ],
    "blockNumber": 2888967,
    "cumulativeGasUsed": "1412639",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5e5007bdd3eb92575499e17eabdd411b42cf79c0",
    "0x1888649D566908E0A4Ac17978740F6A04f600a51",
    "10000000000000000",
    "10000000000000000000000",
    1209600
  ],
  "numDeployments": 3,
  "solcInputHash": "f5a63c48b741cafc72247c44de555742",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hbtContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Contract_\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"nativeTokendDripAmount_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"erc20TokenDripAmount_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeLockInSeconds_\",\"type\":\"uint128\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNativeToken\",\"type\":\"bool\"}],\"name\":\"Dripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"dripERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripNativeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Contract\",\"outputs\":[{\"internalType\":\"contract ITestERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TokendDripAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Contract_\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"nativeTokendDripAmount_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"erc20TokendDripAmount_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeLockInSeconds_\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hbtContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTokendDripAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLockInSeconds\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newERC20ContractAddress\",\"type\":\"address\"}],\"name\":\"updateERC20ContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newAmount\",\"type\":\"uint128\"}],\"name\":\"updateERC20TokenDripAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newHBTContractAddress\",\"type\":\"address\"}],\"name\":\"updateHBTContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newAmount\",\"type\":\"uint128\"}],\"name\":\"updateNativeTokenDripAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newTimeLock\",\"type\":\"uint128\"}],\"name\":\"updateTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Faucet.sol\":\"HumanboundTokenGatedFaucet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@violetprotocol/erc721extendable/contracts/extensions/base/getter/IGetterLogic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@violetprotocol/extendable/extensions/InternalExtension.sol\\\";\\n\\ninterface IGetterLogic {\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) external returns (address);\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) external returns (address);\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external returns (bool);\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     *\\n     * Requirements:\\n     *\\n     * - Must be modified with `public _internal`.\\n     */\\n    function _exists(uint256 tokenId) external returns (bool);\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     * - Must be modified with `public _internal`.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) external returns (bool);\\n}\\n\\nabstract contract GetterExtension is IGetterLogic, InternalExtension {\\n    /**\\n     * @dev see {IExtension-getSolidityInterface}\\n     */\\n    function getSolidityInterface() public pure virtual override returns (string memory) {\\n        return\\n            \\\"function balanceOf(address owner) external view returns (uint256);\\\\n\\\"\\n            \\\"function ownerOf(uint256 tokenId) external view returns (address);\\\\n\\\"\\n            \\\"function getApproved(uint256 tokenId) external view returns (address);\\\\n\\\"\\n            \\\"function isApprovedForAll(address owner, address operator) external view returns (bool);\\\\n\\\"\\n            \\\"function _exists(uint256 tokenId) external view returns (bool);\\\\n\\\"\\n            \\\"function _isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\\\n\\\";\\n    }\\n\\n    /**\\n     * @dev see {IExtension-getInterface}\\n     */\\n    function getInterface() public virtual override returns (Interface[] memory interfaces) {\\n        interfaces = new Interface[](1);\\n\\n        bytes4[] memory functions = new bytes4[](6);\\n        functions[0] = IGetterLogic.balanceOf.selector;\\n        functions[1] = IGetterLogic.ownerOf.selector;\\n        functions[2] = IGetterLogic.getApproved.selector;\\n        functions[3] = IGetterLogic.isApprovedForAll.selector;\\n        functions[4] = IGetterLogic._exists.selector;\\n        functions[5] = IGetterLogic._isApprovedOrOwner.selector;\\n\\n        interfaces[0] = Interface(type(IGetterLogic).interfaceId, functions);\\n    }\\n}\\n\",\"keccak256\":\"0x24e1c63f5bba5fb6ce45282650d66874fa787007785be3af308d005714a9f08e\",\"license\":\"MIT\"},\"@violetprotocol/extendable/erc165/IERC165Logic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external returns (bool);\\n}\\n\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Uses Extendable storage pattern to populate the registered interfaces storage variable.\\n */\\ninterface IERC165Register {\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function registerInterface(bytes4 interfaceId) external;\\n}\",\"keccak256\":\"0x4eff75b3b1814f99866e004b68cb1d7fd48bb1ff89854a0d3bb90ac6e293c9e6\",\"license\":\"MIT\"},\"@violetprotocol/extendable/errors/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev  ExtensionNotImplemented error is emitted by Extendable and Extensions\\n *       where no implementation for a specified function signature exists\\n *       in the contract\\n*/\\nerror ExtensionNotImplemented();\\n\\n\\n/**\\n * @dev  Utility library for contracts to catch custom errors\\n *       Pass in a return `result` from a call, and the selector for your error message\\n *       and the `catchCustomError` function will return `true` if the error was found\\n *       or `false` otherwise\\n*/\\nlibrary Errors {\\n    function catchCustomError(bytes memory result, bytes4 errorSelector) internal pure returns(bool) {\\n        bytes4 caught;\\n        assembly {\\n            caught := mload(add(result, 0x20))\\n        }\\n\\n        return caught == errorSelector;\\n    }\\n}\",\"keccak256\":\"0x3c5581551798f973fe70339bf5313d5be3446df69680bf878c695108beff1bc8\",\"license\":\"MIT\"},\"@violetprotocol/extendable/extensions/Extension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IExtension.sol\\\";\\nimport \\\"../errors/Errors.sol\\\";\\nimport \\\"../utils/CallerContext.sol\\\";\\nimport \\\"../erc165/IERC165Logic.sol\\\";\\n\\n/**\\n *  ______  __  __  ______  ______  __   __  _____   ______  ______  __      ______    \\n * /\\\\  ___\\\\/\\\\_\\\\_\\\\_\\\\/\\\\__  _\\\\/\\\\  ___\\\\/\\\\ \\\"-.\\\\ \\\\/\\\\  __-./\\\\  __ \\\\/\\\\  == \\\\/\\\\ \\\\    /\\\\  ___\\\\\\n * \\\\ \\\\  __\\\\\\\\/_/\\\\_\\\\/\\\\/_/\\\\ \\\\/\\\\ \\\\  __\\\\\\\\ \\\\ \\\\-.  \\\\ \\\\ \\\\/\\\\ \\\\ \\\\  __ \\\\ \\\\  __<\\\\ \\\\ \\\\___\\\\ \\\\  __\\\\\\n *  \\\\ \\\\_____\\\\/\\\\_\\\\/\\\\_\\\\ \\\\ \\\\_\\\\ \\\\ \\\\_____\\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\ \\\\____-\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_____\\\\ \\\\_____\\\\ \\\\_____\\\\\\n *   \\\\/_____/\\\\/_/\\\\/_/  \\\\/_/  \\\\/_____/\\\\/_/ \\\\/_/\\\\/____/ \\\\/_/\\\\/_/\\\\/_____/\\\\/_____/\\\\/_____/\\n *\\n *  Base contract for Extensions in the Extendable Framework\\n *  \\n *  Inherit and implement this contract to create Extension contracts!\\n *\\n *  Implements the EIP-165 standard for interface detection of implementations during runtime.\\n *  Uses the ERC165 singleton pattern where the actual implementation logic of the interface is\\n *  deployed in a separate contract. See ERC165Logic. Deterministic deployment guarantees the\\n *  ERC165Logic contract to always exist as static address 0x16C940672fA7820C36b2123E657029d982629070\\n *\\n *  Define your custom Extension interface and implement it whilst inheriting this contract:\\n *      contract YourExtension is IYourExtension, Extension {...}\\n *\\n */\\nabstract contract Extension is CallerContext, IExtension, IERC165, IERC165Register {\\n    address constant ERC165LogicAddress = 0x16C940672fA7820C36b2123E657029d982629070;\\n\\n    /**\\n     * @dev Constructor registers your custom Extension interface under EIP-165:\\n     *      https://eips.ethereum.org/EIPS/eip-165\\n    */\\n    constructor() {\\n        Interface[] memory interfaces = getInterface();\\n        for (uint256 i = 0; i < interfaces.length; i++) {\\n            Interface memory iface = interfaces[i];\\n            registerInterface(iface.interfaceId);\\n\\n            for (uint256 j = 0; j < iface.functions.length; j++) {\\n                registerInterface(iface.functions[j]);\\n            }\\n        }\\n\\n        registerInterface(type(IExtension).interfaceId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external override virtual returns(bool) {\\n        (bool success, bytes memory result) = ERC165LogicAddress.delegatecall(abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", interfaceId));\\n\\n        if (!success) {\\n            assembly {\\n                revert(result, returndatasize())\\n            }\\n        }\\n\\n        return abi.decode(result, (bool));\\n    }\\n\\n    function registerInterface(bytes4 interfaceId) public override virtual {\\n        (bool success, ) = ERC165LogicAddress.delegatecall(abi.encodeWithSignature(\\\"registerInterface(bytes4)\\\", interfaceId));\\n\\n        if (!success) {\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unidentified function signature calls to any Extension reverts with\\n     *      ExtensionNotImplemented error\\n    */\\n    function _fallback() internal virtual {\\n        revert ExtensionNotImplemented();\\n    }\\n\\n    /**\\n     * @dev Fallback function passes to internal _fallback() logic\\n    */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n    \\n    /**\\n     * @dev Payable fallback function passes to internal _fallback() logic\\n    */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Virtual override declaration of getFunctionSelectors() function to silence compiler\\n     *\\n     * Must be implemented in inherited contract.\\n    */\\n    function getInterface() override public virtual returns(Interface[] memory);\\n}\",\"keccak256\":\"0x4cd611549baf99c139ca1842fabf2ee97627cf856c6348efcc4186a0f0161ceb\",\"license\":\"MIT\"},\"@violetprotocol/extendable/extensions/IExtension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct Interface {\\n    bytes4 interfaceId;\\n    bytes4[] functions;\\n}\\n\\n/**\\n * @dev Interface for Extension\\n*/\\ninterface IExtension {\\n    /**\\n     * @dev Returns a full view of the functional interface of the extension\\n     *\\n     * Must return a list of the functions in the interface of your custom Extension\\n     * in the same format and syntax as in the interface itself as a string, \\n     * escaped-newline separated.\\n     *\\n     * OPEN TO SUGGESTIONS FOR IMPROVEMENT ON THIS METHODOLOGY FOR \\n     * DEEP DESCRIPTIVE RUNTIME INTROSPECTION\\n     *\\n     * Intent is to allow developers that want to integrate with an Extendable contract\\n     * that will have a constantly evolving interface, due to the nature of Extendables,\\n     * to be able to easily inspect and query for the current state of the interface and\\n     * integrate with it.\\n     *\\n     * See {ExtendLogic-getSolidityInterface} for an example.\\n    */\\n    function getSolidityInterface() external pure returns(string memory);\\n\\n    /**\\n     * @dev Returns the interface IDs that are implemented by the Extension\\n     *\\n     * These are full interface IDs and ARE NOT function selectors. Full interface IDs are\\n     * XOR'd function selectors of an interface. For example the interface ID of the ERC721\\n     * interface is 0x80ac58cd determined by the XOR or all function selectors of the interface.\\n     * \\n     * If an interface only consists of a single function, then the interface ID is identical\\n     * to that function selector.\\n     * \\n     * Provides a simple abstraction from the developer for any custom Extension to \\n     * be EIP-165 compliant out-of-the-box simply by implementing this function. \\n     *\\n     * Excludes any functions either already described by other interface definitions\\n     * that are not developed on top of this backbone i.e. EIP-165, IExtension\\n    */\\n    function getInterface() external returns(Interface[] memory interfaces);\\n}\",\"keccak256\":\"0xf23958c9a1107b5561f081620a3223ca73ce1f3c573137d7f851dac852908912\",\"license\":\"MIT\"},\"@violetprotocol/extendable/extensions/InternalExtension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Extension.sol\\\";\\nimport \\\"../utils/Internal.sol\\\";\\nimport \\\"../errors/Errors.sol\\\";\\n\\n/**\\n *  ______  __  __  ______  ______  __   __  _____   ______  ______  __      ______    \\n * /\\\\  ___\\\\/\\\\_\\\\_\\\\_\\\\/\\\\__  _\\\\/\\\\  ___\\\\/\\\\ \\\"-.\\\\ \\\\/\\\\  __-./\\\\  __ \\\\/\\\\  == \\\\/\\\\ \\\\    /\\\\  ___\\\\\\n * \\\\ \\\\  __\\\\\\\\/_/\\\\_\\\\/\\\\/_/\\\\ \\\\/\\\\ \\\\  __\\\\\\\\ \\\\ \\\\-.  \\\\ \\\\ \\\\/\\\\ \\\\ \\\\  __ \\\\ \\\\  __<\\\\ \\\\ \\\\___\\\\ \\\\  __\\\\\\n *  \\\\ \\\\_____\\\\/\\\\_\\\\/\\\\_\\\\ \\\\ \\\\_\\\\ \\\\ \\\\_____\\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\ \\\\____-\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_____\\\\ \\\\_____\\\\ \\\\_____\\\\\\n *   \\\\/_____/\\\\/_/\\\\/_/  \\\\/_/  \\\\/_____/\\\\/_/ \\\\/_/\\\\/____/ \\\\/_/\\\\/_/\\\\/_____/\\\\/_____/\\\\/_____/\\n *\\n *  Base contract for Internal Extensions in the Extendable Framework\\n *  \\n *  Internal Extensions are used to house common functions that are used by other contract extensions.\\n *  This is used to make internal functions usable across all your extensions without exposing it\\n *  to the external world.\\n *\\n *  Define your custom Extension interface and implement it whilst inheriting this contract:\\n *      contract YourExtension is IYourExtension, InternalExtension {...}\\n *\\n *  Then define your function and simply modify it in the following way:\\n *      contract YourExtension is IYourExtension, InternalExtension {\\n *          function _someFunc() public _internal {}\\n *      }\\n *   \\n *  Notice that your internal function carries both the `public` visibility modifier and the `_internal` \\n *  modifier. This is because cross-extension calls are resolved as external calls and `public` allows\\n *  your other extensions to call them whilst `_internal` restricts callers to only extensions of the\\n *  same contract.\\n *\\n *  Note:\\n *  Use underscores `_` as internal function prefixes as general naming convention.\\n */\\nabstract contract InternalExtension is Internal, Extension {}\",\"keccak256\":\"0xf7fdaf54b910732821db42f48f7022ea503a47370cf970af66dabcffae2ea2ed\",\"license\":\"MIT\"},\"@violetprotocol/extendable/storage/CallerContextStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct CallerState {\\n    // Stores a list of callers in the order they are received\\n    // The current caller context is always the last-most address\\n    address[] callerStack;\\n}\\n\\nlibrary CallerContextStorage {\\n    bytes32 constant private STORAGE_NAME = keccak256(\\\"extendable.framework.v1:caller-state\\\");\\n\\n    function _getState()\\n        internal \\n        view\\n        returns (CallerState storage callerState) \\n    {\\n        bytes32 position = keccak256(abi.encodePacked(address(this), STORAGE_NAME));\\n        assembly {\\n            callerState.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0xb6b7176b4b1ec6e80aae63770c518144f514c36af1812e754d4c489f31e800d2\",\"license\":\"MIT\"},\"@violetprotocol/extendable/utils/CallerContext.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {CallerState, CallerContextStorage} from \\\"../storage/CallerContextStorage.sol\\\";\\n\\n/**\\n * @dev CallerContext contract provides Extensions with proper caller-scoped contexts.\\n *      Inherit this contract with your Extension to make use of caller references.\\n *\\n * `msg.sender` may not behave as developer intends when using within Extensions as many\\n * calls may be exchanged between intra-contract extensions which result in a `msg.sender` as self.\\n * Instead of using `msg.sender`, replace it with \\n *      - `_lastExternalCaller()` for the most recent caller in the call chain that is external to this contract\\n *      - `_lastCaller()` for the most recent caller\\n *\\n * CallerContext provides a deep callstack to track the caller of the Extension/Extendable contract\\n * at any point in the execution cycle.\\n *\\n*/\\ncontract CallerContext {\\n    /**\\n     * @dev Returns the most recent caller of this contract that came from outside this contract.\\n     *\\n     * Used by extensions that require fetching msg.sender that aren't cross-extension calls.\\n     * Cross-extension calls resolve msg.sender as the current contract and so the actual\\n     * caller context is obfuscated.\\n     * \\n     * This function should be used in place of `msg.sender` where external callers are read.\\n     */\\n    function _lastExternalCaller() internal view returns(address) {\\n        CallerState storage state = CallerContextStorage._getState();\\n\\n        for (uint i = state.callerStack.length - 1; i >= 0; i--) {\\n            address lastSubsequentCaller = state.callerStack[i];\\n            if (lastSubsequentCaller != address(this)) {\\n                return lastSubsequentCaller;\\n            }\\n        }\\n\\n        revert(\\\"_lastExternalCaller: end of stack\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the most recent caller of this contract.\\n     *\\n     * Last caller may also be the current contract.\\n     *\\n     * If the call is directly to the contract, without passing an Extendable, return `msg.sender` instead\\n     */\\n    function _lastCaller() internal view returns(address) {\\n        CallerState storage state = CallerContextStorage._getState();\\n        if (state.callerStack.length > 0)\\n            return state.callerStack[state.callerStack.length - 1];\\n        else\\n            return msg.sender;\\n    }\\n}\",\"keccak256\":\"0xc3d509c7663a1fd19f9ed58d37ec9e92353e9a3d51057b61f68b175dc117bfc9\",\"license\":\"MIT\"},\"@violetprotocol/extendable/utils/Internal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Internal contract base inherited by InternalExtension to allow access\\n *      to `_internal` modifier for functions that should only be callable by\\n *      other Extensions of the current contract thus keeping the functions\\n *      'internal' with respects to Extendable contract scope.\\n *\\n * Modify your functions with `_internal` to restrict callers to only originate\\n * from the current Extendable contract.\\n *\\n * Note that due to the nature of cross-Extension calls, they are deemed as external\\n * calls and thus your functions must counterintuitively be marked as both:\\n *\\n * `public _internal`\\n *\\n * function yourFunction() public _internal {}\\n*/\\n\\ncontract Internal {\\n    modifier _internal() {\\n        require(msg.sender == address(this), \\\"external caller not allowed\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x1e6ce4acd8f2fec131bd1d8f525c51874cf7c132fe5b6d5764059a97571b5934\",\"license\":\"MIT\"},\"contracts/Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport {IGetterLogic} from '@violetprotocol/erc721extendable/contracts/extensions/base/getter/IGetterLogic.sol';\\nimport './ITestERC20.sol';\\n\\n/*\\n  A faucet leveraging Humanbound Tokens (https://humanbound.xyz/) to provide Sybil-resistance.\\n*/\\ncontract HumanboundTokenGatedFaucet is Ownable {\\n  // Emitted when someone claim funds from the faucet\\n  event Dripped(address recipient, uint256 amount, bool isNativeToken);\\n  // Emitted when an owner withdraw native tokens\\n  event Withdrawn(address recipient, uint256 amount);\\n\\n  // Address of the Humanbound Token contract\\n  address public hbtContract;\\n  // Address of the test ERC20 tokens\\n  ITestERC20 public erc20Contract;\\n  // Amount of native tokens to drip\\n  uint128 public nativeTokendDripAmount;\\n  // Amount of ERC20 tokens to drip\\n  uint128 public erc20TokendDripAmount;\\n  // Upon a successful drip of native tokens, an address cannot\\n  // claim funds again until this time lock has elapsed\\n  uint128 public timeLockInSeconds;\\n  // Recording when the last drip of native tokens happened by address\\n  mapping(address => uint256) public lastDrip;\\n\\n  constructor(\\n    address hbtContract_,\\n    address erc20Contract_,\\n    uint128 nativeTokendDripAmount_,\\n    uint128 erc20TokenDripAmount_,\\n    uint128 timeLockInSeconds_\\n  ) payable {\\n    hbtContract = hbtContract_;\\n    erc20Contract = ITestERC20(erc20Contract_);\\n    nativeTokendDripAmount = nativeTokendDripAmount_;\\n    erc20TokendDripAmount = erc20TokenDripAmount_;\\n    timeLockInSeconds = timeLockInSeconds_;\\n  }\\n\\n  modifier onlyHBTOwners() {\\n    // Verify HBT ownership\\n    require(\\n      IGetterLogic(hbtContract).balanceOf(msg.sender) > 0,\\n      'Unauthorized: Ownership of a Humanbound Token is required'\\n    );\\n    _;\\n  }\\n\\n  receive() external payable {}\\n\\n  fallback() external payable {}\\n\\n  function getBalance() public view returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n  function getStatus()\\n    public\\n    view\\n    returns (\\n      uint256 balance_,\\n      address erc20Contract_,\\n      uint128 nativeTokendDripAmount_,\\n      uint128 erc20TokendDripAmount_,\\n      uint128 timeLockInSeconds_\\n    )\\n  {\\n    return (\\n      address(this).balance,\\n      address(erc20Contract),\\n      nativeTokendDripAmount,\\n      erc20TokendDripAmount,\\n      timeLockInSeconds\\n    );\\n  }\\n\\n  function dripNativeTokens() external onlyHBTOwners {\\n    require(\\n      block.timestamp > lastDrip[msg.sender] + timeLockInSeconds,\\n      'You reached your quota. Come back after the cooldown period.'\\n    );\\n    lastDrip[msg.sender] = block.timestamp;\\n\\n    (bool sent, ) = msg.sender.call{value: nativeTokendDripAmount}('');\\n    require(sent, 'Failed to drip ETH. Is there enough funds?');\\n\\n    emit Dripped(msg.sender, nativeTokendDripAmount, true);\\n  }\\n\\n  function dripERC20Tokens() external {\\n    erc20Contract.mint(msg.sender, erc20TokendDripAmount);\\n\\n    emit Dripped(msg.sender, erc20TokendDripAmount, false);\\n  }\\n\\n  function updateHBTContractAddress(address newHBTContractAddress) external onlyOwner {\\n    hbtContract = newHBTContractAddress;\\n  }\\n\\n  function updateERC20ContractAddress(address newERC20ContractAddress) external onlyOwner {\\n    erc20Contract = ITestERC20(newERC20ContractAddress);\\n  }\\n\\n  function updateNativeTokenDripAmount(uint128 newAmount) external onlyOwner {\\n    nativeTokendDripAmount = newAmount;\\n  }\\n\\n  function updateERC20TokenDripAmount(uint128 newAmount) external onlyOwner {\\n    erc20TokendDripAmount = newAmount;\\n  }\\n\\n  function updateTimeLock(uint128 newTimeLock) external onlyOwner {\\n    timeLockInSeconds = newTimeLock;\\n  }\\n\\n  function withdraw(uint256 amount) external onlyOwner {\\n    _withdraw(amount);\\n  }\\n\\n  function withdrawAll() external onlyOwner {\\n    uint256 thisBalance = address(this).balance;\\n\\n    _withdraw(thisBalance);\\n  }\\n\\n  function _withdraw(uint256 amount) private {\\n    address recipient = msg.sender;\\n\\n    (bool sent, ) = recipient.call{value: amount}('');\\n    require(sent, 'Failed withdrawing ETH');\\n\\n    emit Withdrawn(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xf4c770b0a9e6f7a6c26f1991fcddbde5ce2c153601c7f268e4f92dacddf3f2ab\",\"license\":\"MIT\"},\"contracts/ITestERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface ITestERC20 {\\n\\tfunction mint(address account, uint256 amount) external;\\n}\",\"keccak256\":\"0xea12d14430ad185af8944077e9fc6e3529c5f961745cb016c1fa1000525574ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052604051620019f0380380620019f0833981810160405281019062000029919062000304565b620000496200003d6200018160201b60201c565b6200018960201b60201c565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555081600360106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080600460006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505050506200038c565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200027f8262000252565b9050919050565b620002918162000272565b81146200029d57600080fd5b50565b600081519050620002b18162000286565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b620002de81620002b7565b8114620002ea57600080fd5b50565b600081519050620002fe81620002d3565b92915050565b600080600080600060a086880312156200032357620003226200024d565b5b60006200033388828901620002a0565b95505060206200034688828901620002a0565b94505060406200035988828901620002ed565b93505060606200036c88828901620002ed565b92505060806200037f88828901620002ed565b9150509295509295909350565b611654806200039c6000396000f3fe6080604052600436106101235760003560e01c8063827b5ab4116100a0578063a048b26011610064578063a048b26014610383578063a8f6c9131461039a578063cfb530de146103c5578063f24282fe146103ee578063f2fde38b146104175761012a565b8063827b5ab4146102d4578063853828b6146102eb5780638da5cb5b146103025780638df4e82a1461032d57806398caffc6146103585761012a565b80634124f931116100e75780634124f93114610211578063431a9fb51461023c5780634e69d56014610265578063715018a6146102945780637c5e59ee146102ab5761012a565b80630762fde31461012c5780630935f004146101575780630d1d6ff91461019457806312065fe0146101bd5780632e1a7d4d146101e85761012a565b3661012a57005b005b34801561013857600080fd5b50610141610440565b60405161014e9190610e83565b60405180910390f35b34801561016357600080fd5b5061017e60048036038101906101799190610f01565b610462565b60405161018b9190610f47565b60405180910390f35b3480156101a057600080fd5b506101bb60048036038101906101b69190610f8e565b61047a565b005b3480156101c957600080fd5b506101d26104be565b6040516101df9190610f47565b60405180910390f35b3480156101f457600080fd5b5061020f600480360381019061020a9190610fe7565b6104c6565b005b34801561021d57600080fd5b506102266104da565b6040516102339190610e83565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e9190610f01565b6104fc565b005b34801561027157600080fd5b5061027a610548565b60405161028b959493929190611023565b60405180910390f35b3480156102a057600080fd5b506102a96105e2565b005b3480156102b757600080fd5b506102d260048036038101906102cd9190610f8e565b6105f6565b005b3480156102e057600080fd5b506102e961063a565b005b3480156102f757600080fd5b50610300610953565b005b34801561030e57600080fd5b5061031761096c565b6040516103249190611076565b60405180910390f35b34801561033957600080fd5b50610342610995565b60405161034f9190610e83565b60405180910390f35b34801561036457600080fd5b5061036d6109b7565b60405161037a9190611076565b60405180910390f35b34801561038f57600080fd5b506103986109dd565b005b3480156103a657600080fd5b506103af610ae6565b6040516103bc91906110f0565b60405180910390f35b3480156103d157600080fd5b506103ec60048036038101906103e79190610f01565b610b0c565b005b3480156103fa57600080fd5b5061041560048036038101906104109190610f8e565b610b58565b005b34801561042357600080fd5b5061043e60048036038101906104399190610f01565b610b9c565b005b600460009054906101000a90046fffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915090505481565b610482610c1f565b80600360106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b600047905090565b6104ce610c1f565b6104d781610c9d565b50565b600360009054906101000a90046fffffffffffffffffffffffffffffffff1681565b610504610c1f565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600047600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a90046fffffffffffffffffffffffffffffffff16600360109054906101000a90046fffffffffffffffffffffffffffffffff16600460009054906101000a90046fffffffffffffffffffffffffffffffff16945094509450945094509091929394565b6105ea610c1f565b6105f46000610d8c565b565b6105fe610c1f565b80600460006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106979190611076565b6020604051808303816000875af11580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190611120565b1161071a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610711906111d0565b60405180910390fd5b600460009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610795919061121f565b42116107d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cd906112e7565b60405180910390fd5b42600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1660405161087090611338565b60006040518083038185875af1925050503d80600081146108ad576040519150601f19603f3d011682016040523d82523d6000602084013e6108b2565b606091505b50509050806108f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ed906113bf565b60405180910390fd5b7f6598076c9af2410c0669c503130ed827a55d3e687985526680111a722364f43133600360009054906101000a90046fffffffffffffffffffffffffffffffff1660016040516109489392919061142b565b60405180910390a150565b61095b610c1f565b600047905061096981610c9d565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360109054906101000a90046fffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933600360109054906101000a90046fffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610a58929190611462565b600060405180830381600087803b158015610a7257600080fd5b505af1158015610a86573d6000803e3d6000fd5b505050507f6598076c9af2410c0669c503130ed827a55d3e687985526680111a722364f43133600360109054906101000a90046fffffffffffffffffffffffffffffffff166000604051610adc9392919061142b565b60405180910390a1565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b14610c1f565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b60610c1f565b80600360006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b610ba4610c1f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a906114fd565b60405180910390fd5b610c1c81610d8c565b50565b610c27610e50565b73ffffffffffffffffffffffffffffffffffffffff16610c4561096c565b73ffffffffffffffffffffffffffffffffffffffff1614610c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9290611569565b60405180910390fd5b565b600033905060008173ffffffffffffffffffffffffffffffffffffffff1683604051610cc890611338565b60006040518083038185875af1925050503d8060008114610d05576040519150601f19603f3d011682016040523d82523d6000602084013e610d0a565b606091505b5050905080610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d45906115d5565b60405180910390fd5b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58284604051610d7f9291906115f5565b60405180910390a1505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60006fffffffffffffffffffffffffffffffff82169050919050565b610e7d81610e58565b82525050565b6000602082019050610e986000830184610e74565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ece82610ea3565b9050919050565b610ede81610ec3565b8114610ee957600080fd5b50565b600081359050610efb81610ed5565b92915050565b600060208284031215610f1757610f16610e9e565b5b6000610f2584828501610eec565b91505092915050565b6000819050919050565b610f4181610f2e565b82525050565b6000602082019050610f5c6000830184610f38565b92915050565b610f6b81610e58565b8114610f7657600080fd5b50565b600081359050610f8881610f62565b92915050565b600060208284031215610fa457610fa3610e9e565b5b6000610fb284828501610f79565b91505092915050565b610fc481610f2e565b8114610fcf57600080fd5b50565b600081359050610fe181610fbb565b92915050565b600060208284031215610ffd57610ffc610e9e565b5b600061100b84828501610fd2565b91505092915050565b61101d81610ec3565b82525050565b600060a0820190506110386000830188610f38565b6110456020830187611014565b6110526040830186610e74565b61105f6060830185610e74565b61106c6080830184610e74565b9695505050505050565b600060208201905061108b6000830184611014565b92915050565b6000819050919050565b60006110b66110b16110ac84610ea3565b611091565b610ea3565b9050919050565b60006110c88261109b565b9050919050565b60006110da826110bd565b9050919050565b6110ea816110cf565b82525050565b600060208201905061110560008301846110e1565b92915050565b60008151905061111a81610fbb565b92915050565b60006020828403121561113657611135610e9e565b5b60006111448482850161110b565b91505092915050565b600082825260208201905092915050565b7f556e617574686f72697a65643a204f776e657273686970206f6620612048756d60008201527f616e626f756e6420546f6b656e20697320726571756972656400000000000000602082015250565b60006111ba60398361114d565b91506111c58261115e565b604082019050919050565b600060208201905081810360008301526111e9816111ad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061122a82610f2e565b915061123583610f2e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561126a576112696111f0565b5b828201905092915050565b7f596f75207265616368656420796f75722071756f74612e20436f6d652062616360008201527f6b2061667465722074686520636f6f6c646f776e20706572696f642e00000000602082015250565b60006112d1603c8361114d565b91506112dc82611275565b604082019050919050565b60006020820190508181036000830152611300816112c4565b9050919050565b600081905092915050565b50565b6000611322600083611307565b915061132d82611312565b600082019050919050565b600061134382611315565b9150819050919050565b7f4661696c656420746f2064726970204554482e20497320746865726520656e6f60008201527f7567682066756e64733f00000000000000000000000000000000000000000000602082015250565b60006113a9602a8361114d565b91506113b48261134d565b604082019050919050565b600060208201905081810360008301526113d88161139c565b9050919050565b60006113fa6113f56113f084610e58565b611091565b610f2e565b9050919050565b61140a816113df565b82525050565b60008115159050919050565b61142581611410565b82525050565b60006060820190506114406000830186611014565b61144d6020830185611401565b61145a604083018461141c565b949350505050565b60006040820190506114776000830185611014565b6114846020830184611401565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006114e760268361114d565b91506114f28261148b565b604082019050919050565b60006020820190508181036000830152611516816114da565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061155360208361114d565b915061155e8261151d565b602082019050919050565b6000602082019050818103600083015261158281611546565b9050919050565b7f4661696c6564207769746864726177696e672045544800000000000000000000600082015250565b60006115bf60168361114d565b91506115ca82611589565b602082019050919050565b600060208201905081810360008301526115ee816115b2565b9050919050565b600060408201905061160a6000830185611014565b6116176020830184610f38565b939250505056fea26469706673582212203714a9218bc88496bf6d4a75bbe6e9a96702859d839fcfd83db04f9f4920165664736f6c634300080e0033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c8063827b5ab4116100a0578063a048b26011610064578063a048b26014610383578063a8f6c9131461039a578063cfb530de146103c5578063f24282fe146103ee578063f2fde38b146104175761012a565b8063827b5ab4146102d4578063853828b6146102eb5780638da5cb5b146103025780638df4e82a1461032d57806398caffc6146103585761012a565b80634124f931116100e75780634124f93114610211578063431a9fb51461023c5780634e69d56014610265578063715018a6146102945780637c5e59ee146102ab5761012a565b80630762fde31461012c5780630935f004146101575780630d1d6ff91461019457806312065fe0146101bd5780632e1a7d4d146101e85761012a565b3661012a57005b005b34801561013857600080fd5b50610141610440565b60405161014e9190610e83565b60405180910390f35b34801561016357600080fd5b5061017e60048036038101906101799190610f01565b610462565b60405161018b9190610f47565b60405180910390f35b3480156101a057600080fd5b506101bb60048036038101906101b69190610f8e565b61047a565b005b3480156101c957600080fd5b506101d26104be565b6040516101df9190610f47565b60405180910390f35b3480156101f457600080fd5b5061020f600480360381019061020a9190610fe7565b6104c6565b005b34801561021d57600080fd5b506102266104da565b6040516102339190610e83565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e9190610f01565b6104fc565b005b34801561027157600080fd5b5061027a610548565b60405161028b959493929190611023565b60405180910390f35b3480156102a057600080fd5b506102a96105e2565b005b3480156102b757600080fd5b506102d260048036038101906102cd9190610f8e565b6105f6565b005b3480156102e057600080fd5b506102e961063a565b005b3480156102f757600080fd5b50610300610953565b005b34801561030e57600080fd5b5061031761096c565b6040516103249190611076565b60405180910390f35b34801561033957600080fd5b50610342610995565b60405161034f9190610e83565b60405180910390f35b34801561036457600080fd5b5061036d6109b7565b60405161037a9190611076565b60405180910390f35b34801561038f57600080fd5b506103986109dd565b005b3480156103a657600080fd5b506103af610ae6565b6040516103bc91906110f0565b60405180910390f35b3480156103d157600080fd5b506103ec60048036038101906103e79190610f01565b610b0c565b005b3480156103fa57600080fd5b5061041560048036038101906104109190610f8e565b610b58565b005b34801561042357600080fd5b5061043e60048036038101906104399190610f01565b610b9c565b005b600460009054906101000a90046fffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915090505481565b610482610c1f565b80600360106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b600047905090565b6104ce610c1f565b6104d781610c9d565b50565b600360009054906101000a90046fffffffffffffffffffffffffffffffff1681565b610504610c1f565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600047600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a90046fffffffffffffffffffffffffffffffff16600360109054906101000a90046fffffffffffffffffffffffffffffffff16600460009054906101000a90046fffffffffffffffffffffffffffffffff16945094509450945094509091929394565b6105ea610c1f565b6105f46000610d8c565b565b6105fe610c1f565b80600460006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106979190611076565b6020604051808303816000875af11580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190611120565b1161071a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610711906111d0565b60405180910390fd5b600460009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610795919061121f565b42116107d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cd906112e7565b60405180910390fd5b42600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1660405161087090611338565b60006040518083038185875af1925050503d80600081146108ad576040519150601f19603f3d011682016040523d82523d6000602084013e6108b2565b606091505b50509050806108f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ed906113bf565b60405180910390fd5b7f6598076c9af2410c0669c503130ed827a55d3e687985526680111a722364f43133600360009054906101000a90046fffffffffffffffffffffffffffffffff1660016040516109489392919061142b565b60405180910390a150565b61095b610c1f565b600047905061096981610c9d565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360109054906101000a90046fffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933600360109054906101000a90046fffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610a58929190611462565b600060405180830381600087803b158015610a7257600080fd5b505af1158015610a86573d6000803e3d6000fd5b505050507f6598076c9af2410c0669c503130ed827a55d3e687985526680111a722364f43133600360109054906101000a90046fffffffffffffffffffffffffffffffff166000604051610adc9392919061142b565b60405180910390a1565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b14610c1f565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b60610c1f565b80600360006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b610ba4610c1f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a906114fd565b60405180910390fd5b610c1c81610d8c565b50565b610c27610e50565b73ffffffffffffffffffffffffffffffffffffffff16610c4561096c565b73ffffffffffffffffffffffffffffffffffffffff1614610c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9290611569565b60405180910390fd5b565b600033905060008173ffffffffffffffffffffffffffffffffffffffff1683604051610cc890611338565b60006040518083038185875af1925050503d8060008114610d05576040519150601f19603f3d011682016040523d82523d6000602084013e610d0a565b606091505b5050905080610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d45906115d5565b60405180910390fd5b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58284604051610d7f9291906115f5565b60405180910390a1505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60006fffffffffffffffffffffffffffffffff82169050919050565b610e7d81610e58565b82525050565b6000602082019050610e986000830184610e74565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ece82610ea3565b9050919050565b610ede81610ec3565b8114610ee957600080fd5b50565b600081359050610efb81610ed5565b92915050565b600060208284031215610f1757610f16610e9e565b5b6000610f2584828501610eec565b91505092915050565b6000819050919050565b610f4181610f2e565b82525050565b6000602082019050610f5c6000830184610f38565b92915050565b610f6b81610e58565b8114610f7657600080fd5b50565b600081359050610f8881610f62565b92915050565b600060208284031215610fa457610fa3610e9e565b5b6000610fb284828501610f79565b91505092915050565b610fc481610f2e565b8114610fcf57600080fd5b50565b600081359050610fe181610fbb565b92915050565b600060208284031215610ffd57610ffc610e9e565b5b600061100b84828501610fd2565b91505092915050565b61101d81610ec3565b82525050565b600060a0820190506110386000830188610f38565b6110456020830187611014565b6110526040830186610e74565b61105f6060830185610e74565b61106c6080830184610e74565b9695505050505050565b600060208201905061108b6000830184611014565b92915050565b6000819050919050565b60006110b66110b16110ac84610ea3565b611091565b610ea3565b9050919050565b60006110c88261109b565b9050919050565b60006110da826110bd565b9050919050565b6110ea816110cf565b82525050565b600060208201905061110560008301846110e1565b92915050565b60008151905061111a81610fbb565b92915050565b60006020828403121561113657611135610e9e565b5b60006111448482850161110b565b91505092915050565b600082825260208201905092915050565b7f556e617574686f72697a65643a204f776e657273686970206f6620612048756d60008201527f616e626f756e6420546f6b656e20697320726571756972656400000000000000602082015250565b60006111ba60398361114d565b91506111c58261115e565b604082019050919050565b600060208201905081810360008301526111e9816111ad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061122a82610f2e565b915061123583610f2e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561126a576112696111f0565b5b828201905092915050565b7f596f75207265616368656420796f75722071756f74612e20436f6d652062616360008201527f6b2061667465722074686520636f6f6c646f776e20706572696f642e00000000602082015250565b60006112d1603c8361114d565b91506112dc82611275565b604082019050919050565b60006020820190508181036000830152611300816112c4565b9050919050565b600081905092915050565b50565b6000611322600083611307565b915061132d82611312565b600082019050919050565b600061134382611315565b9150819050919050565b7f4661696c656420746f2064726970204554482e20497320746865726520656e6f60008201527f7567682066756e64733f00000000000000000000000000000000000000000000602082015250565b60006113a9602a8361114d565b91506113b48261134d565b604082019050919050565b600060208201905081810360008301526113d88161139c565b9050919050565b60006113fa6113f56113f084610e58565b611091565b610f2e565b9050919050565b61140a816113df565b82525050565b60008115159050919050565b61142581611410565b82525050565b60006060820190506114406000830186611014565b61144d6020830185611401565b61145a604083018461141c565b949350505050565b60006040820190506114776000830185611014565b6114846020830184611401565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006114e760268361114d565b91506114f28261148b565b604082019050919050565b60006020820190508181036000830152611516816114da565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061155360208361114d565b915061155e8261151d565b602082019050919050565b6000602082019050818103600083015261158281611546565b9050919050565b7f4661696c6564207769746864726177696e672045544800000000000000000000600082015250565b60006115bf60168361114d565b91506115ca82611589565b602082019050919050565b600060208201905081810360008301526115ee816115b2565b9050919050565b600060408201905061160a6000830185611014565b6116176020830184610f38565b939250505056fea26469706673582212203714a9218bc88496bf6d4a75bbe6e9a96702859d839fcfd83db04f9f4920165664736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2991,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "hbtContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2994,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "erc20Contract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITestERC20)3307"
      },
      {
        "astId": 2996,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "nativeTokendDripAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint128"
      },
      {
        "astId": 2998,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "erc20TokendDripAmount",
        "offset": 16,
        "slot": "3",
        "type": "t_uint128"
      },
      {
        "astId": 3000,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "timeLockInSeconds",
        "offset": 0,
        "slot": "4",
        "type": "t_uint128"
      },
      {
        "astId": 3004,
        "contract": "contracts/Faucet.sol:HumanboundTokenGatedFaucet",
        "label": "lastDrip",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITestERC20)3307": {
        "encoding": "inplace",
        "label": "contract ITestERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}